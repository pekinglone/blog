<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[spring-boot-mybatis-docker整合使用]]></title>
    <url>%2Fblog%2F2017%2F07%2F23%2Fspring-boot-mybatis-docker%2F</url>
    <content type="text"><![CDATA[0x00 前置条件 Java maven Docker 0x01 使用maven新建Spring Boot工程按工程根目录的相对路径创建如下文件 pom.xml12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.tomoyadeng&lt;/groupId&gt; &lt;artifactId&gt;demo-springboot-docker&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.4.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; src/main/java/demo/Application.java12345678910111213141516171819package demo;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@SpringBootApplication@RestControllerpublic class Application &#123; @RequestMapping("/") public String home() &#123; return "Get started"; &#125; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125; 这样，一个简单的Spring boot的应用就创建OK。可使用mvn package编译打包为jar， 然后使用命令行java -jar target/demo-springboot-docker-1.0.0.jar直接启动 0x02 将应用docker化 首先创建应用的Dockerfile src/main/docker/Dockerfile123456FROM java:8VOLUME /tmpADD demo-springboot-docker-1.0.0.jar app.jarRUN sh -c 'touch /app.jar'ENV JAVA_OPTS=""ENTRYPOINT [ "sh", "-c", "java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar" ] 然后在pom.xml中添加maven插件依赖，以支持构建docker镜像 pom.xml 12345678910111213141516&lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;0.4.11&lt;/version&gt; &lt;configuration&gt; &lt;imageName&gt;tomoyadeng/$&#123;project.artifactId&#125;&lt;/imageName&gt; &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt;&lt;/plugin&gt; 使用mvn install docker:build即可构建docker镜像，构建完成后，docker images可查看当前的镜像。 docker run -p 8080:8080 -t tomoyadeng/demo-springboot-docker 可以启动docker容器，此时就完成了此应用的docker化1234567891011tomoya@ubuntu:~/Code/demo-springboot-docker$ docker run -p 8080:8080 -t tomoyadeng/demo-springboot-docker . ____ _ __ _ _ /\\ / ___'_ __ _ _(_)_ __ __ _ \ \ \ \( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \ \\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v1.5.4.RELEASE)2017-07-23 11:53:34.894 INFO 5 --- [ main] demo.Application : Starting Application v1.0.0 on f1ff304f4b94 with PID 5 (/app.jar started by root in /)... 可使用docker stop和docker rm来停止容器运行 12345tomoya@ubuntu:~/Code/demo-springboot-docker$ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESf1ff304f4b94 tomoyadeng/demo-springboot-docker "sh -c 'java $JAVA..." About a minute ago Up About a minute 0.0.0.0:8080-&gt;8080/tcp keen_swartz$ docker stop f1ff304f4b94$ docker rm f1ff304f4b94 0x03 创建MyBatis的demo首先，在pom.xml中添加mybatis和mysql-connector的依赖 pom.xml12345678910&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;6.0.6&lt;/version&gt;&lt;/dependency&gt; 添加object类，此处省略了getter和setter src/main/java/demo/domain/User.java123456789101112131415package demo.domain;import java.io.Serializable;public class User implements Serializable &#123; private static final long serialVersionUID = 1L; private int id; private String name; private String phoneNo; private String email;&#125; 添加mapper src/main/java/demo/mapper/UserMapper.java123456789101112package demo.mapper;import demo.domain.User;import org.apache.ibatis.annotations.Mapper;import org.apache.ibatis.annotations.Param;import org.apache.ibatis.annotations.Select;@Mapperpublic interface UserMapper &#123; @Select("select * from tbl_user where name = #&#123;name&#125;") User findByName(@Param("name") String name);&#125; 修改Application.java，添加查询数据库的操作 src/main/java/demo/Application.java123456789101112131415161718192021222324252627282930313233343536package demo;import demo.domain.User;import demo.mapper.UserMapper;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import static org.springframework.web.bind.annotation.RequestMethod.GET;@SpringBootApplication@RestControllerpublic class Application &#123; final private UserMapper userMapper; public Application(UserMapper userMapper) &#123; this.userMapper = userMapper; &#125; @RequestMapping("/") public String home() &#123; return "Get started"; &#125; @RequestMapping(value = "/user", method = GET) public String getUserByName(@RequestParam("name") String name) &#123; User user = this.userMapper.findByName(name); return user == null ? "No such user!" : user.toString(); &#125; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125; 添加application.yml配置文件 src/main/resources/application.yml1234567891011121314151617# application.ymlspring: datasource: url: jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&amp;useSSL=false driverClassName: com.mysql.cj.jdbc.Driver username: root password: 123456 schema: classpath:schema.sql---spring: profiles: container datasource: url: jdbc:mysql://$&#123;DATABASE_HOST&#125;:$&#123;DATABASE_PORT&#125;/$&#123;DATABASE_NAME&#125;?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&amp;useSSL=false username: $&#123;DATABASE_USER&#125; password: $&#123;DATABASE_PASSWORD&#125; schema: classpath:schema.sql initialize: true 附：schema.sql src/main/resources/schema.sql12345drop table if exists tbl_user;create table tbl_user(id int primary key auto_increment,name varchar(32),phoneNo varchar(16), email varchar(32));insert into tbl_user(name, phoneNo, email) values ('dave', '13012345678', 'dave@tomoyadeng.com'); 修改Dockerfile，主要是修改ENTRYPOINT src/main/docker/Dockerfile123456FROM java:8VOLUME /tmpADD demo-springboot-docker-1.0.0.jar app.jarRUN sh -c 'touch /app.jar'ENV JAVA_OPTS=""ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-Dspring.profiles.active=container","-jar","/app.jar"] 0x04 手动启动docker应用首先，我们需要先启动一个mysql的容器，执行下面命令即可 1234567docker run -d \ --name mybatis-mysql \ -e MYSQL_ROOT_PASSWORD=123456 \ -e MYSQL_DATABASE=mybatis \ -e MYSQL_USER=dbuser \ -e MYSQL_PASSWORD=123456 \ mysql:latest 启动完成后，可用docker ps查看，也可以通过执行下面命令连接到mysql 12docker run -it --link mybatis-mysql:mysql --rm mysql sh \ -c 'exec mysql -h"$MYSQL_PORT_3306_TCP_ADDR" -P"$MYSQL_PORT_3306_TCP_PORT" -uroot -p"$MYSQL_ENV_MYSQL_ROOT_PASSWORD"' 然后，启动应用容器并连接到mysql 12345678910docker run -d -t \ --name demo-springboot-docker \ --link mybatis-mysql:mysql \ -p 8088:8080 \ -e DATABASE_HOST=mybatis-mysql \ -e DATABASE_PORT=3306 \ -e DATABASE_NAME=mybatis \ -e DATABASE_USER=root \ -e DATABASE_PASSWORD=123456 \ tomoyadeng/demo-springboot-docker 启动完成后，使用docker ps查看，或者直接访问url测试 1curl http://localhost:8088/user?name=dave]]></content>
  </entry>
</search>