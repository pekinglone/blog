<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tomoya&#39;s Blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://tomoyadeng.github.io/blog/"/>
  <updated>2018-10-31T13:19:37.336Z</updated>
  <id>https://tomoyadeng.github.io/blog/</id>
  
  <author>
    <name>Tomoya Deng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>K8s上部署MySQL主从</title>
    <link href="https://tomoyadeng.github.io/blog/2018/10/31/k8s-mysql-cluster/"/>
    <id>https://tomoyadeng.github.io/blog/2018/10/31/k8s-mysql-cluster/</id>
    <published>2018-10-31T11:34:59.000Z</published>
    <updated>2018-10-31T13:19:37.336Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>K8s实验环境从minikube升级到单主多节点的集群后，接下来就准备把单实例的MySQL升级为MySQL主从架构。本文就介绍下怎么在K8s集群中部署MySQL主从，数据持久化采用nfs。</p><a id="more"></a><h2 id="0x01-搭建-NFS-服务器"><a href="#0x01-搭建-NFS-服务器" class="headerlink" title="0x01 搭建 NFS 服务器"></a>0x01 搭建 NFS 服务器</h2><p>参考 <a href="https://linuxconfig.org/how-to-configure-a-nfs-file-server-on-ubuntu-18-04-bionic-beaver" target="_blank" rel="noopener">https://linuxconfig.org/how-to-configure-a-nfs-file-server-on-ubuntu-18-04-bionic-beaver</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install nfs-kernel-server</span><br></pre></td></tr></table></figure><p>编辑 <code>/etc/exports</code></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/nfs*(rw,sync,no_subtree_check,no_root_squash)</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nfs-kernel-server</span><br></pre></td></tr></table></figure><p>创建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /nfs/mysql/data/master</span><br><span class="line">mkdir -p /nfs/mysql/data/replica</span><br></pre></td></tr></table></figure><h2 id="0x02-准备-MySQL-主从镜像"><a href="#0x02-准备-MySQL-主从镜像" class="headerlink" title="0x02 准备 MySQL 主从镜像"></a>0x02 准备 MySQL 主从镜像</h2><p>我们可以通过对MySQL官方的Dockerfile进行修改，然后构建生成主从镜像，首先把官方镜像克隆下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/docker-library/mysql.git</span><br></pre></td></tr></table></figure><p>当然也可以直接把 <code>Dockerfile</code> 和 <code>docker-entrypoint.sh</code> 下载到本地(这里选择MySQL 5.7 版本)</p><p><a href="https://github.com/docker-library/mysql/tree/master/5.7" target="_blank" rel="noopener">https://github.com/docker-library/mysql/tree/master/5.7</a></p><h3 id="修改-master-Dockerfile"><a href="#修改-master-Dockerfile" class="headerlink" title="修改 master Dockerfile"></a>修改 master Dockerfile</h3><ol><li><p>将 <code>Dockerfile</code> 和 <code>docker-entrypoint.sh</code> 拷贝一份到一个新的目录，用于构建 master 镜像。</p></li><li><p>在 <code>Dockerfile</code> 中 <code>VOLUME /var/lib/mysql</code> 这一行前面加一行。这一行的作用是将mysql master的server-id设置为1。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN sed -i <span class="string">'/\[mysqld\]/a server-id=1\nlog-bin'</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><ol start="3"><li>在docker-entrypoint.sh中添加如下内容，创建一个复制用户并赋权限，刷新系统权限表</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"CREATE USER '<span class="variable">$MYSQL_REPLICATION_USER</span>'@'%' IDENTIFIED BY '<span class="variable">$MYSQL_REPLICATION_PASSWORD</span>' ;"</span> | <span class="string">"<span class="variable">$&#123;mysql[@]&#125;</span>"</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"GRANT REPLICATION SLAVE ON *.* TO '<span class="variable">$MYSQL_REPLICATION_USER</span>'@'%' IDENTIFIED BY '<span class="variable">$MYSQL_REPLICATION_PASSWORD</span>' ;"</span> | <span class="string">"<span class="variable">$&#123;mysql[@]&#125;</span>"</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">'FLUSH PRIVILEGES ;'</span> | <span class="string">"<span class="variable">$&#123;mysql[@]&#125;</span>"</span></span><br></pre></td></tr></table></figure><img src="/blog/2018/10/31/k8s-mysql-cluster/master-1.png"><h3 id="修改-replica-Dockerfile"><a href="#修改-replica-Dockerfile" class="headerlink" title="修改 replica Dockerfile"></a>修改 replica Dockerfile</h3><ol><li><p>将 <code>Dockerfile</code> 和 <code>docker-entrypoint.sh</code> 拷贝一份到一个新的目录，用于构建 replica 镜像。</p></li><li><p>在 <code>Dockerfile</code> 中 <code>VOLUME /var/lib/mysql</code> 这一行前面添加如下内容，将mysql replica的server-id设置为一个随机数:</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN RAND=<span class="string">"<span class="variable">$(date +%s | rev | cut -c 1-2)</span><span class="variable">$(echo $&#123;RANDOM&#125;)</span>"</span> &amp;&amp; sed -i <span class="string">'/\[mysqld\]/a server-id='</span><span class="variable">$RAND</span><span class="string">'\nlog-bin'</span> /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><ol start="3"><li>在docker-entrypoint.sh中添加如下内容，配置连接master主机的host、user、password等参数，并启动复制进程。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"STOP SLAVE;"</span> | <span class="string">"<span class="variable">$&#123;mysql[@]&#125;</span>"</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"CHANGE MASTER TO master_host='<span class="variable">$MYSQL_MASTER_SERVICE_HOST</span>', master_user='<span class="variable">$MYSQL_REPLICATION_USER</span>', master_password='<span class="variable">$MYSQL_REPLICATION_PASSWORD</span>' ;"</span> | <span class="string">"<span class="variable">$&#123;mysql[@]&#125;</span>"</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"START SLAVE;"</span> | <span class="string">"<span class="variable">$&#123;mysql[@]&#125;</span>"</span></span><br></pre></td></tr></table></figure><img src="/blog/2018/10/31/k8s-mysql-cluster/replica-1.png"><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/dockerfile/mysql/master/</span><br><span class="line">docker build -t tomoyadeng/mysql-master:5.7.1</span><br><span class="line">docker push tomoyadeng/mysql-master:5.7.1</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/dockerfile/mysql/replica01</span><br><span class="line">docker build -t tomoyadeng/mysql-replica:5.7.1</span><br><span class="line">docker push tomoyadeng/mysql-replica:5.7.1</span><br></pre></td></tr></table></figure><p>构建的时候可能会出错，重试几次就好了，<a href="https://github.com/docker-library/official-images/issues/4252#issuecomment-381783035" target="_blank" rel="noopener">docker-library/official-images#4252 (comment)</a></p><p>也可以选择直接使用我构建好的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomoyadeng/mysql-master:5.7.1</span><br><span class="line">docker pull tomoyadeng/mysql-replica:5.7.1</span><br></pre></td></tr></table></figure><h2 id="0x03-创建-Secret"><a href="#0x03-创建-Secret" class="headerlink" title="0x03 创建 Secret"></a>0x03 创建 Secret</h2><p>新建 <code>mysql-secret.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-pass</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line"><span class="attr">  rootuser:</span> <span class="string">cm9vdA==</span></span><br><span class="line"><span class="attr">  rootpwd:</span> <span class="string">MTIzNDU2</span></span><br><span class="line"><span class="attr">  repluser:</span> <span class="string">cmVwbA==</span></span><br><span class="line"><span class="attr">  replpwd:</span> <span class="string">MTIzNDU2</span></span><br></pre></td></tr></table></figure><p>创建 Secret</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f mysql-secret.yaml</span><br></pre></td></tr></table></figure><h2 id="0x04-创建-PV"><a href="#0x04-创建-PV" class="headerlink" title="0x04 创建 PV"></a>0x04 创建 PV</h2><p>新建 <code>master-pv.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">master-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  capacity:</span></span><br><span class="line"><span class="attr">    storage:</span> <span class="number">1</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">  volumeMode:</span> <span class="string">Filesystem</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"><span class="attr">  persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line"><span class="attr">  storageClassName:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  mountOptions:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hard</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">nfsvers=4.1</span></span><br><span class="line"><span class="attr">  nfs:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/nfs/mysql/data/master</span></span><br><span class="line"><span class="attr">    server:</span> <span class="number">192.168</span><span class="number">.99</span><span class="number">.103</span></span><br></pre></td></tr></table></figure><p>随后通过<code>kubectl create -f master-pv.yaml</code> 创建 master pv</p><p>新建 <code>replica-pv.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">replica-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  capacity:</span></span><br><span class="line"><span class="attr">    storage:</span> <span class="number">1</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">  volumeMode:</span> <span class="string">Filesystem</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"><span class="attr">  persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line"><span class="attr">  storageClassName:</span> <span class="string">replica</span></span><br><span class="line"><span class="attr">  mountOptions:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hard</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">nfsvers=4.1</span></span><br><span class="line"><span class="attr">  nfs:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/nfs/mysql/data/replica</span></span><br><span class="line"><span class="attr">    server:</span> <span class="number">192.168</span><span class="number">.99</span><span class="number">.103</span></span><br></pre></td></tr></table></figure><p>随后通过<code>kubectl create -f replica-pv.yaml</code> 创建 replica pv</p><h2 id="0x05-部署-master"><a href="#0x05-部署-master" class="headerlink" title="0x05 部署 master"></a>0x05 部署 master</h2><p>新建 <code>mysql-master-deployment.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-master</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">mysql-master</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">mysql-master</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-master-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="attr">    requests:</span></span><br><span class="line"><span class="attr">      storage:</span> <span class="number">1</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">  storageClassName:</span> <span class="string">master</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-master</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">mysql-master</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">mysql-master</span></span><br><span class="line"><span class="attr">  strategy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">Recreate</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">mysql-master</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="string">tomoyadeng/mysql-master:5.7.1</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            secretKeyRef:</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">mysql-pass</span></span><br><span class="line"><span class="attr">              key:</span> <span class="string">rootpwd</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MYSQL_REPLICATION_USER</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            secretKeyRef:</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">mysql-pass</span></span><br><span class="line"><span class="attr">              key:</span> <span class="string">repluser</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MYSQL_REPLICAITON_PASSWORD</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            secretKeyRef:</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">mysql-pass</span></span><br><span class="line"><span class="attr">              key:</span> <span class="string">replpwd</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">mysql-persistent-storage</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">mysql-persistent-storage</span></span><br><span class="line"><span class="attr">        persistentVolumeClaim:</span></span><br><span class="line"><span class="attr">          claimName:</span> <span class="string">mysql-master-pvc</span></span><br></pre></td></tr></table></figure><p>上面的yaml文件包含了创建 master的 PVC，Deployment 和 Service，直接通过 <code>kubectl create -f mysql-master-deployment.yaml</code> 进行部署。</p><p>部署完成后，可以通过 <code>kubectl get svc | grep master</code> 查看刚才部署的 Service，然后可以通过运行MySQL客户端以连接到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@k8s-master001:~/k8s/mysql-cluster<span class="comment"># kubectl run -it --rm --image=mysql:5.7 mysql-client -- mysql -h 10.97.247.244 -p123456</span></span><br><span class="line"></span><br><span class="line">kubectl run --generator=deployment/apps.v1beta1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl create instead.</span><br><span class="line">If you don<span class="string">'t see a command prompt, try pressing enter.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt;</span></span><br></pre></td></tr></table></figure><p>这里的ip是通过 <code>kubectl get svc</code> 查到的 CLUSTER-IP</p><h2 id="0x06-部署-replica"><a href="#0x06-部署-replica" class="headerlink" title="0x06 部署 replica"></a>0x06 部署 replica</h2><p>新建 <code>mysql-replica-deployment.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-replica</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">mysql-replica</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">mysql-replica</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-replica-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="attr">    requests:</span></span><br><span class="line"><span class="attr">      storage:</span> <span class="number">1</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">  storageClassName:</span> <span class="string">replica</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-replica</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">mysql-replica</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">mysql-replica</span></span><br><span class="line"><span class="attr">  strategy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">Recreate</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">mysql-replica</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="string">tomoyadeng/mysql-replica:5.7.1</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MYSQL_MASTER_SERVICE_HOST</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">mysql-master</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            secretKeyRef:</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">mysql-pass</span></span><br><span class="line"><span class="attr">              key:</span> <span class="string">rootpwd</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MYSQL_REPLICATION_USER</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            secretKeyRef:</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">mysql-pass</span></span><br><span class="line"><span class="attr">              key:</span> <span class="string">repluser</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MYSQL_REPLICAITON_PASSWORD</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            secretKeyRef:</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">mysql-pass</span></span><br><span class="line"><span class="attr">              key:</span> <span class="string">replpwd</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">mysql-replica-storage</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">mysql-replica-storage</span></span><br><span class="line"><span class="attr">        persistentVolumeClaim:</span></span><br><span class="line"><span class="attr">          claimName:</span> <span class="string">mysql-replica-pvc</span></span><br></pre></td></tr></table></figure><p>这里的 <code>MYSQL_MASTER_SERVICE_HOST</code> 环境变量配置的就是之前master svc的名称。随后，直接使用 <code>kubectl create -f mysql-replica-deployment.yaml</code> 进行部署。过一会儿，可以通过运行客户端连接 replica，查看备份状态</p><img src="/blog/2018/10/31/k8s-mysql-cluster/status.png"><h2 id="0x07-总结"><a href="#0x07-总结" class="headerlink" title="0x07 总结"></a>0x07 总结</h2><p>至此，MySQL主从就搭建好了，工程源文件见 <a href="https://github.com/tomoyadeng/demo-springboot-k8s/tree/master/mysql-cluster" target="_blank" rel="noopener">https://github.com/tomoyadeng/demo-springboot-k8s/tree/master/mysql-cluster</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;K8s实验环境从minikube升级到单主多节点的集群后，接下来就准备把单实例的MySQL升级为MySQL主从架构。本文就介绍下怎么在K8s集群中部署MySQL主从，数据持久化采用nfs。&lt;/p&gt;
    
    </summary>
    
      <category term="Cloud Computing" scheme="https://tomoyadeng.github.io/blog/categories/Cloud-Computing/"/>
    
    
      <category term="kubernetes" scheme="https://tomoyadeng.github.io/blog/tags/kubernetes/"/>
    
      <category term="mysql" scheme="https://tomoyadeng.github.io/blog/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>K8s折腾日记(零) -- 基于 Ubuntu 18.04 安装部署K8s集群</title>
    <link href="https://tomoyadeng.github.io/blog/2018/10/12/k8s-in-ubuntu18.04/"/>
    <id>https://tomoyadeng.github.io/blog/2018/10/12/k8s-in-ubuntu18.04/</id>
    <published>2018-10-12T12:13:48.000Z</published>
    <updated>2018-10-12T14:56:15.794Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><strong>基于 Kubernetes 1.12.1</strong></p><p>之前折腾K8s的时候一直使用的是在 Ubuntu 虚拟机上起的 minikube，最近想在我的笔记本上使用多台虚拟机部署一套 Kubernetes 集群。正好今年上半年 Ubuntu 发布了新的LTS版本 – 18.04 (Bionic Beaver)，于是便有了这篇文章，在 Ubuntu 18.04 上折腾安装部署 K8s 集群。</p><a id="more"></a><h2 id="0x00-前置条件"><a href="#0x00-前置条件" class="headerlink" title="0x00 前置条件"></a>0x00 前置条件</h2><ul><li>Ubuntu 18.04 虚拟机</li><li>Shadowsocks 科学上网</li></ul><p>我的笔记本是Win10，通过 HyperV 安装了 3 台虚拟机，并对虚拟机进行如下规划：</p><table><thead><tr><th>主机名</th><th>ip</th><th>角色</th><th>配置</th><th>OS</th></tr></thead><tbody><tr><td>k8s-master001</td><td>192.168.99.103</td><td>master</td><td>2C2G</td><td>Ubuntu 18.04</td></tr><tr><td>k8s-node001</td><td>192.168.99.104</td><td>node</td><td>1C2G</td><td>Ubuntu 18.04</td></tr><tr><td>k8s-node002</td><td>192.168.99.105</td><td>node</td><td>1C2G</td><td>Ubuntu 18.04</td></tr></tbody></table><h2 id="0x01-环境准备-所有虚拟机"><a href="#0x01-环境准备-所有虚拟机" class="headerlink" title="0x01 环境准备(所有虚拟机)"></a>0x01 环境准备(所有虚拟机)</h2><h3 id="Ubuntu虚拟机配置apt源"><a href="#Ubuntu虚拟机配置apt源" class="headerlink" title="Ubuntu虚拟机配置apt源"></a>Ubuntu虚拟机配置apt源</h3><p>国内配置apt源为阿里云的源下载速度会快一些，把 <code>/etc/apt/sources.list</code> 里面的内容替换成下面的内容即可</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><h3 id="配置-Shadowsocks-客户端进行科学上网"><a href="#配置-Shadowsocks-客户端进行科学上网" class="headerlink" title="配置 Shadowsocks 客户端进行科学上网"></a>配置 Shadowsocks 客户端进行科学上网</h3><h4 id="1-安装-Shadowsocks-客户端"><a href="#1-安装-Shadowsocks-客户端" class="headerlink" title="1. 安装 Shadowsocks 客户端"></a>1. 安装 Shadowsocks 客户端</h4><p>参考 <a href="https://github.com/Shadowsocks-Wiki/shadowsocks/blob/master/6-linux-setup-guide-cn.md#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%A2%E6%88%B7%E7%AB%AF" target="_blank" rel="noopener">Shadowsocks 设置方法 (Linux)</a></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python-pip</span><br><span class="line">pip install git+https://github.com/shadowsocks/shadowsocks.git@master</span><br></pre></td></tr></table></figure><h4 id="2-创建-Shadowsocks-配置文件"><a href="#2-创建-Shadowsocks-配置文件" class="headerlink" title="2. 创建 Shadowsocks 配置文件"></a>2. 创建 Shadowsocks 配置文件</h4><p>创建一个 <code>/etc/shadowsocks.json</code> 文件，格式如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"服务器 IP 或是域名"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>:端口号,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"密码"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"加密方式 (chacha20-ietf-poly1305 / aes-256-cfb)"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-启动-Shadowsocks"><a href="#3-启动-Shadowsocks" class="headerlink" title="3. 启动 Shadowsocks"></a>3. 启动 Shadowsocks</h4><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/sslocal -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure><h4 id="4-安裝-privoxy"><a href="#4-安裝-privoxy" class="headerlink" title="4. 安裝 privoxy"></a>4. 安裝 privoxy</h4><p>为了在终端中使用代理，还需要安装配置 privoxy (也可以选择 proxychains)</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install privoxy -y</span><br></pre></td></tr></table></figure><h4 id="5-配置-privoxy"><a href="#5-配置-privoxy" class="headerlink" title="5. 配置 privoxy"></a>5. 配置 privoxy</h4><p>安装完成后编辑 <code>/etc/privoxy/config</code>，搜索关键字 <code>forward-socks5t</code>，取消下面这一行的注释:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forward-socks5t   /               127.0.0.1:1080 .</span><br></pre></td></tr></table></figure><p>这里 1080 对应着上面 Shadowsocks 配置文件中的“端口号”。</p><h4 id="6-启动-privoxy"><a href="#6-启动-privoxy" class="headerlink" title="6. 启动 privoxy"></a>6. 启动 privoxy</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start privoxy</span><br></pre></td></tr></table></figure><h4 id="7-配置-proxy"><a href="#7-配置-proxy" class="headerlink" title="7. 配置 proxy"></a>7. 配置 proxy</h4><p>编辑 <code>~/.profile</code>，并在文件末尾添加如下内容：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:8118</span><br><span class="line">export https_proxy=http://127.0.0.1:8118</span><br><span class="line">export ftp_proxy=http://127.0.0.1:8118</span><br><span class="line">export no_proxy=localhost,127.0.0.0,127.0.1.1,127.0.1.1,10.0.0.0/8,192.168.0.0/16,mirrors.aliyun.com</span><br><span class="line"></span><br><span class="line">export HTTP_PROXY=http://127.0.0.1:8118</span><br><span class="line">export HTTPS_PROXY=http://127.0.0.1:8118</span><br><span class="line">export FTP_PROXY=http://127.0.0.1:8118</span><br><span class="line">export NO_PROXY=localhost,127.0.0.0,127.0.1.1,127.0.1.1,10.0.0.0/8,192.168.0.0/16,mirrors.aliyun.com</span><br></pre></td></tr></table></figure><p>执行 <code>source ~/.profile</code> 使之生效。</p><p>测试proxy是否可用</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.google.com</span><br></pre></td></tr></table></figure><h3 id="关闭swap"><a href="#关闭swap" class="headerlink" title="关闭swap"></a>关闭swap</h3><p>编辑<code>/etc/fstab</code>文件，注释掉引用swap的行，保存并重启后输入<code>sudo swapoff -a</code>即可。参考<a href="https://github.com/kubernetes/kubernetes/issues/53533" target="_blank" rel="noopener">Kubelet/Kubernetes should work with Swap Enabled</a></p><h2 id="0x02-安装Docker-所有虚拟机"><a href="#0x02-安装Docker-所有虚拟机" class="headerlink" title="0x02 安装Docker(所有虚拟机)"></a>0x02 安装Docker(所有虚拟机)</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>参考 <a href="https://www.alibabacloud.com/help/zh/doc-detail/60742.htm" target="_blank" rel="noopener">安装Docker-阿里云</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="comment"># step 2: 安装GPG证书</span></span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="comment"># Step 3: 写入软件源信息</span></span><br><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br><span class="line"><span class="comment"># Step 4: 更新并指定版本安装Docker-CE （这里安装 18.06.1~ce~3-0~ubuntu）</span></span><br><span class="line">sudo apt-get -y update</span><br><span class="line">apt-cache madison docker-ce</span><br><span class="line"></span><br><span class="line">sudo apt-get -y install docker-ce=18.06.1~ce~3-0~ubuntu</span><br></pre></td></tr></table></figure><h3 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h3><p>参考 <a href="https://yq.aliyun.com/articles/29941" target="_blank" rel="noopener">Docker 镜像加速器</a></p><p>配置加速地址，并重启 Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://[阿里云分配的私有地址].mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="配置-Docker-的-proxy"><a href="#配置-Docker-的-proxy" class="headerlink" title="配置 Docker 的 proxy"></a>配置 Docker 的 proxy</h3><p>Kubernetes 的一些 <code>docker</code> 镜像是需要借助梯子才能拉取到的，为此需要为 <code>Docker</code> 配置 Proxy。</p><p>参考 <a href="https://docs.docker.com/config/daemon/systemd/#httphttps-proxy" target="_blank" rel="noopener">https://docs.docker.com/config/daemon/systemd/#httphttps-proxy</a></p><p>配置文件 <code>/etc/systemd/system/docker.service.d/http-proxy.conf</code> 内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=http://127.0.0.1:8118/&quot;</span><br><span class="line">Environment=&quot;NO_PROXY=localhost,127.0.0.0/8,10.0.0.0/8,192.168.0.0/16,[阿里云分配的私有地址].mirror.aliyuncs.com&quot;</span><br></pre></td></tr></table></figure><p>注意：这里的NO_PROXY需要上面配置的镜像加速地址添加进去</p><p>重启 Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="0x03-安装Kubernetes-所有虚拟机"><a href="#0x03-安装Kubernetes-所有虚拟机" class="headerlink" title="0x03 安装Kubernetes(所有虚拟机)"></a>0x03 安装Kubernetes(所有虚拟机)</h2><p>参考 <a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/" target="_blank" rel="noopener">Installing kubeadm</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https curl</span><br><span class="line">curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb http://apt.kubernetes.io/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><p>注意： 目前kubernetes还没有 Ubuntu18.04 的编好的版本，用的 16.04 xenial 的二进制文件</p><h2 id="0x04-配置master节点"><a href="#0x04-配置master节点" class="headerlink" title="0x04 配置master节点"></a>0x04 配置master节点</h2><h3 id="使用kubeadm-init初始化master节点"><a href="#使用kubeadm-init初始化master节点" class="headerlink" title="使用kubeadm init初始化master节点"></a>使用kubeadm init初始化master节点</h3><p>参考 <a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/</a></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --apiserver-advertise-address 192.168.99.103 --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><p>init 常用主要参数：</p><ul><li>–kubernetes-version: 指定Kubenetes版本，如果不指定该参数，会从google网站下载最新的版本信息。</li><li>–pod-network-cidr: 指定pod网络的IP地址范围，它的值取决于你在下一步选择的哪个网络网络插件，比如我在本文中使用的是 flannel 网络，需要指定为10.244.0.0/16。</li><li>–apiserver-advertise-address: 指定master服务发布的Ip地址，如果不指定，则会自动检测网络接口，通常是内网IP。</li></ul><p>kubeadm init 输出的token用于master和加入节点间的身份认证，token是机密的，需要保证它的安全，因为拥有此标记的人都可以随意向集群中添加节点。</p><h3 id="安装网络插件"><a href="#安装网络插件" class="headerlink" title="安装网络插件"></a>安装网络插件</h3><p>安装一个网络插件是必须的，因为你的pods之间需要彼此通信。</p><p>网络部署必须是优先于任何应用的部署，详细的网络列表可参考<a href="https://kubernetes.io/docs/concepts/cluster-administration/addons/" target="_blank" rel="noopener">插件页面</a>。</p><p>本文使用的是<a href="https://github.com/coreos/flannel" target="_blank" rel="noopener">flannel 网络</a>，安装如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p>插件安装完成后，可以通过检查<code>coredns pod</code>的运行状态来判断网络插件是否正常运行。等待<code>coredns pod</code>的状态变成Running，就可以继续添加从节点了。</p><h2 id="0x05-添加从节点"><a href="#0x05-添加从节点" class="headerlink" title="0x05 添加从节点"></a>0x05 添加从节点</h2><p>在从节点上按照前面的步骤按照好docker和kubeadm后，就可以添加从节点到主节点上了</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.99.103:6443 --token k3c625.qjgzf8bdc8naufzt --discovery-token-ca-cert-hash sha256:3edad91bb59c6657e4b3dea984e9f484c56032b0d81d504e7e6e3615072f334b</span><br></pre></td></tr></table></figure><p>过一会儿就可以通过 <code>kubectl get nodes</code> 命令在主节点上查询到从节点了</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@k8s-master001:~/k8s# kubectl get nodes</span><br><span class="line">NAME            STATUS   ROLES    AGE   VERSION</span><br><span class="line">k8s-master001   Ready    master   21h   v1.12.1</span><br><span class="line">k8s-node001     Ready    &lt;none&gt;   21h   v1.12.1</span><br><span class="line">k8s-node002     Ready    &lt;none&gt;   21h   v1.12.1</span><br></pre></td></tr></table></figure><h2 id="0x06-安装-Dashboard-插件"><a href="#0x06-安装-Dashboard-插件" class="headerlink" title="0x06 安装 Dashboard 插件"></a>0x06 安装 Dashboard 插件</h2><p>dashboard 支持两种模式：</p><p><strong>https</strong></p><p>必须提供证书，参考 <a href="https://github.com/kubernetes/dashboard/wiki/Installation#recommended-setup" target="_blank" rel="noopener">官方部署文档</a></p><pre><code>kubectl apply -f https://github.com/kubernetes/dashboard/blob/master/src/deploy/recommended/kubernetes-dashboard.yaml</code></pre><p><strong>http</strong></p><pre><code>kubectl apply -f https://github.com/kubernetes/dashboard/blob/master/src/deploy/alternative/kubernetes-dashboard.yaml</code></pre><p>我这里先把配置文件下到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/alternative/kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><p>并在配置文件最后添加 <code>type: NodePort</code> 以实现外网访问</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ------------------- Dashboard Service ------------------- #</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><p>执行 <code>kubectl create -f kubernetes-dashboard.yaml</code> 安装。</p><p>为了简单，我这里直接为 Dashboard 赋予 Admin 的权限，参考<a href="https://github.com/kubernetes/dashboard/wiki/Access-control#admin-privileges" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard/wiki/Access-control#admin-privileges</a></p><p>新增 <code>dashboard-admin.yaml</code> 并使用 <code>kubectl create -f dashboard-admin.yaml</code> 进行部署，文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">- kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure><p>接下来就可以直接通过 nodeIp:port 访问 Dashboard 了。暴露的外部端口可以通过 <code>kubectl get svc --namespace=kube-system</code> 查看</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@k8s-master001:~/k8s# kubectl get svc --namespace=kube-system</span><br><span class="line">NAME                   TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">kube-dns               ClusterIP   10.96.0.10     &lt;none&gt;        53/UDP,53/TCP   21h</span><br><span class="line">kubernetes-dashboard   NodePort    10.99.58.148   &lt;none&gt;        80:32094/TCP    20h</span><br></pre></td></tr></table></figure><h2 id="0x07-卸载集群"><a href="#0x07-卸载集群" class="headerlink" title="0x07 卸载集群"></a>0x07 卸载集群</h2><p>想要撤销kubeadm做的事，首先要排除节点，并确保在关闭节点之前要清空节点。</p><p>在主节点上运行：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl drain &lt;node name&gt; --delete-local-data --force --ignore-daemonsets</span><br><span class="line">kubectl delete node &lt;node name&gt;</span><br></pre></td></tr></table></figure><p>然后在需要移除的节点上，重置kubeadm的安装状态：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;基于 Kubernetes 1.12.1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前折腾K8s的时候一直使用的是在 Ubuntu 虚拟机上起的 minikube，最近想在我的笔记本上使用多台虚拟机部署一套 Kubernetes 集群。正好今年上半年 Ubuntu 发布了新的LTS版本 – 18.04 (Bionic Beaver)，于是便有了这篇文章，在 Ubuntu 18.04 上折腾安装部署 K8s 集群。&lt;/p&gt;
    
    </summary>
    
      <category term="Cloud Computing" scheme="https://tomoyadeng.github.io/blog/categories/Cloud-Computing/"/>
    
    
      <category term="kubernetes" scheme="https://tomoyadeng.github.io/blog/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>使用 Stream API 简化代码</title>
    <link href="https://tomoyadeng.github.io/blog/2018/10/07/simplify-code-with-stream-api/"/>
    <id>https://tomoyadeng.github.io/blog/2018/10/07/simplify-code-with-stream-api/</id>
    <published>2018-10-07T13:11:07.000Z</published>
    <updated>2018-10-12T16:08:15.638Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Stream API 是 Java 8 新引入的特性，用来增强集合操作。前段时间，在开发新需求以及重构老代码的时候，我开始尝试使用Java Stream API，使写出的代码更简洁也更易维护。这篇文章便对 Java Stream API 做一个总结，也记录一下我在使用过程中的一些心得和技巧。</p><a id="more"></a><h2 id="0x01-从一个简单场景讲起"><a href="#0x01-从一个简单场景讲起" class="headerlink" title="0x01 从一个简单场景讲起"></a>0x01 从一个简单场景讲起</h2><p>先考虑这样一种可能在游戏代码里遇到的场景：每个玩家可以创建和培养众多游戏角色，现在从数据库或者其他地方获得了一批游戏角色信息，需要过滤出角色等级大于60的角色，并按照玩家ID进行归并。</p><p>这是一个常见的对数据进行过滤并归并的操作，如果在使用 JDK 7 的时候，我们的代码可能长这个样子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;Long, List&lt;Character&gt;&gt; groupCharacterByGamer() &#123;</span><br><span class="line">    List&lt;Character&gt; characters = characterDao.getCharacters();</span><br><span class="line">    Map&lt;Long, List&lt;Character&gt;&gt; results = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Character character : characters) &#123;</span><br><span class="line">        <span class="keyword">if</span> (character.getLevel() &gt; <span class="number">60</span>) &#123;</span><br><span class="line">            List&lt;Character&gt; gamerCharacters = results.get(character.getGamerId());</span><br><span class="line">            <span class="keyword">if</span> (gamerCharacters == <span class="keyword">null</span>) &#123;</span><br><span class="line">                gamerCharacters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            gamerCharacters.add(character);</span><br><span class="line">            results.put(character.getGamerId(), gamerCharacters);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里列举下上面方法用到的实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Gamer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Character</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long gamerId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CharacterDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Character&gt; <span class="title">getCharacters</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面直接看下在 JDK 8 Stream API 的帮助下，我们可以怎样让代码简单一点点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;Long, List&lt;Character&gt;&gt; groupCharacterByGamerWithStreamAPI() &#123;</span><br><span class="line">    List&lt;Character&gt; characters = characterDao.getCharacters();</span><br><span class="line">    <span class="keyword">return</span> characters</span><br><span class="line">            .stream()</span><br><span class="line">            .filter(character -&gt; character.getLevel() &gt; <span class="number">60</span>)</span><br><span class="line">            .collect(Collectors.groupingBy(Character::getGamerId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先说直观感受，对比之前的版本，使用Stream API的代码变得简单和清晰了不少。</p><h2 id="0x01-Lambda-表达式-amp-方法引用"><a href="#0x01-Lambda-表达式-amp-方法引用" class="headerlink" title="0x01 Lambda 表达式 &amp; 方法引用"></a>0x01 Lambda 表达式 &amp; 方法引用</h2><p>在讨论Stream API之前，先看看和 Stream API 一同被引入JDK 8 的另外两个特性： Lambda 表达式和方法引用。在上面的例子中<code>c -&gt; c.getLevel() &gt; 60</code> 就是一个 Lambda 表达式， 而 <code>Character::getGamerId</code> 则使用了方法引用，正是在这两个特性的加持下，Stream API 才变得异常强大。</p><h3 id="初探-Lambda-表达式"><a href="#初探-Lambda-表达式" class="headerlink" title="初探 Lambda 表达式"></a>初探 Lambda 表达式</h3><p>Java 通过引入 Lambda 表达式，为 Java 带来了函数式编程的手段，这样我们在参数传递时，不但能够传递对象，还能传递行为(函数)。在这之前，针对这种情况，一般是采用回调或者匿名内部类实现。比如，上面例子中的 <code>c -&gt; c.getLevel() &gt; 60</code>和下面冗长的代码实现的效果是一样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Predicate&lt;Character&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Character character)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> character.getLevel() &gt; <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于为什么需要 Lambda 表达式的进一步讨论，可以看看这篇文章<a href="https://dzone.com/articles/why-we-need-Lambda-expressions" target="_blank" rel="noopener">Why We Need Lambda Expressions in Java</a>。</p><p>从上面的例子也看到了，Lambda 表达式以 <code>(argument) -&gt; {body}</code> 的形式呈现，但Lambda 表达式到底是什么呢？是新增的类型么？</p><p>我在学习 Lambda 表示式时，总看到别人讲其背后是函数式接口，实际上，这两者之间的关系是： Java 使用函数式接口来表示 lambda 表达式类型，即，每个 Lambda 表达式都能隐式地赋值给函数式接口。例如，我们可以通过 Lambda 表达式创建 Runnable 接口的引用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Runnable r = () -&gt; System.out.print(<span class="string">"Lambda"</span>);</span><br><span class="line">executor.submit(r);</span><br></pre></td></tr></table></figure><p>实际上在使用的时候，通常不这样赋值后使用，而是直接使用下面的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">executor.submit(() -&gt; System.out.print(<span class="string">"Lambda"</span>));</span><br></pre></td></tr></table></figure><p>在未指定函数式接口类型时，编译器会根据方法的签名将对应的类型推断出来，上面例子中<code>submit</code>方法的签名为<code>submit(Runnable task)</code>，因此编译器会将该 Lambda 表达式赋值给 Runnable 接口。</p><h3 id="谈谈函数式接口"><a href="#谈谈函数式接口" class="headerlink" title="谈谈函数式接口"></a>谈谈函数式接口</h3><p>什么是函数式接口？–简而言之，就是只有一个抽象方法的接口，也被称为SAM(Single Abstract Method)接口。Java 8 之后，任何满足单一抽象方法法则的接口，都会被自动视为函数接口，所以 Runnable 和 Callable 接口也是函数式接口。值得注意的是：单一抽象方法并不代表接口只有一个方法，除了唯一的抽象方法外，函数式接口中可能还有接口默认方法或者静态方法。例如在之前的 Stream API 例子中使用的<code>filter</code>方法参数是一个<code>Predicate&lt;T&gt;</code>接口，其含义为：“接受一个输入参数，并返回一个布尔值结果”。除<code>test</code>方法为一个抽象方法外，Predicate 接口还有<code>and</code>，<code>negate</code>，<code>or</code>三个接口默认方法以及<code>isEqual</code>这个静态方法。</p><p>接口默认方法也是Java 8 新增的特性，这一改变使接口里可以不完全是抽象的内容，也可以添加特定的具体实现。例如经常在集合类上使用的<code>forEach</code>方法，它实际上来自于 <code>Iterable</code> 接口的一个接口默认方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(action);</span><br><span class="line">    <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</span><br><span class="line">        action.accept(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了上面提到的<code>Runable</code>等传统函数式接口，以及<code>Stream</code>的<code>filter</code>使用的<code>Predicate&lt;T&gt;</code>，<code>forEach</code> 使用的<code>Consumer&lt;T&gt;</code>外，JDK 8 还包含多个新函数接口，比如 Supplier<t>、BiConsumer&lt;T, U&gt; 和 BiFunction&lt;T, U, R&gt;，它们均是在java.util.function 包中定义的。</t></p><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>一言以蔽之，方法引用是用于简化Lambda表达式的一种手段。对于有些功能函数的实现已经存在的情况下，我们可以直接使用方法引用来构造Lambda表达式。为此，Java 使用了一个新的操作符<code>::</code>来表达方法引用。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List.of(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>).forEach(s -&gt; System.out.println(s));</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">List.of(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>方法引用通过类名和方法名来定位一个静态方法或者实例方法，其语法为<code>ClassName::methodName</code> 或者 <code>instanceRefence::methodName</code>，如果引用的方法是构造器，则方法名为<code>new</code>。方法引用比 Lambda 表达式更简洁，所以一般能直接改写成方法引用的方式就写成方法引用，且智能的IDE也会提示你进行简写。</p><h2 id="0x02-Stream-API-和-流式操作"><a href="#0x02-Stream-API-和-流式操作" class="headerlink" title="0x02 Stream API 和 流式操作"></a>0x02 Stream API 和 流式操作</h2><p>了解了 Lambda 表达式和方法引用，接下来就看看Stream API 是怎么和他们结合起来使用的。</p><p>首先需要明确的是，Stream 不是集合类，它本身是不保存数据的，它更像一个更高级的迭代器。不过同传统的迭代器不一样的是，它是内部迭代，不需要显示地把数据一个一个拿出来加工，只需要传入对元素的操作(函数)，Stream 便能够在内部完成迭代。</p><p>我们在使用流的时候，可以想象成一个流水线，数据在流水线上流动，会经过一系列的加工转换，最终生成我们想要的数据。流的操作一般可以看作有三个基本步骤：获取一个数据源 -&gt; 中间过程进行各种数据加工 -&gt; 执行终点操作以获取想要的结果。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;Long, List&lt;Character&gt;&gt; groupCharacterByGamerWithStreamAPI() &#123;</span><br><span class="line">    <span class="keyword">return</span> characterDao</span><br><span class="line">            .getCharacters()</span><br><span class="line">            .stream() <span class="comment">// 获取流数据源</span></span><br><span class="line">            .filter(c -&gt; c.getLevel() &gt; <span class="number">60</span>) <span class="comment">// 中间操作</span></span><br><span class="line">            .collect(Collectors.groupingBy(Character::getGamerId)); <span class="comment">// 终点操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流的操作类型分为两种： 中间操作(Intermediate) 和 终点操作(Terminal)。一个流可以有N个中间操作，但是只能有一个终点操作。接下来就来看看怎么生成流，以及常见的流的中间操作和终点操作都有哪些。</p><h3 id="创建-Stream"><a href="#创建-Stream" class="headerlink" title="创建 Stream"></a>创建 Stream</h3><p>Java 提供了多种方式来创建流，比较常用的有如下几种：</p><ul><li>由集合或者数组直接生成: <code>Collection.stream()</code>, <code>Arrays.stream(Object[])</code> 等<ul><li><code>List.of(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;).stream()</code></li><li><code>Arrays.stream(new String[] {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;})</code></li></ul></li><li>由流的静态方法生成： <code>Stream.of(T... values)</code>, <code>IntStream.range(int, int)</code> 等<ul><li><code>Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code></li><li><code>IntStream.range(1,10)</code></li></ul></li><li>从文件中获得流：<code>BufferedReader.lines()</code>, <code>Files.lines(Path path)</code> 等<ul><li><code>Files.newBufferedReader(Paths.get(&quot;/path/to/file&quot;),StandardCharsets.UTF_8).lines()</code></li><li><code>Files.lines(Paths.get(&quot;/path/to/file&quot;))</code></li></ul></li><li>通过迭代或者生成器自己创建流： <code>Stream.iterate(Object, UnaryOperator)</code>，<code>Stream.generate(Supplier&lt;? extends T&gt; s)</code> 等<ul><li><code>Stream.iterate(1, n -&gt; n + 2)</code></li><li><code>Stream.generate(Math::random)</code></li></ul></li></ul><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><p>常用的流的中间操作主要有：map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、unordered 等。</p><p>下面简单介绍下几个最常见的中间操作，剩下的可以查官方API</p><h4 id="limit-skip"><a href="#limit-skip" class="headerlink" title="limit/skip"></a>limit/skip</h4><p><code>limit</code> 返回 Stream 的前面 n 个元素；<code>skip</code> 则是扔掉前 n 个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成5个随机数</span></span><br><span class="line">Stream.generate(Math::random).limit(<span class="number">5</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳过第一行的表头</span></span><br><span class="line">Files.lines(Paths.get(<span class="string">"test.csv"</span>)).skip(<span class="number">1</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p><code>filter</code> 对数据进行过滤，返回的流中只包含满足断言(predicate)的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统计非空字符串数量</span></span><br><span class="line"><span class="keyword">long</span> count = Stream.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">""</span>, <span class="string">"c"</span>).filter(s -&gt; !s.isEmpty()).count();</span><br></pre></td></tr></table></figure><p>P.S. <code>filter</code> 里面的 <code>s -&gt; !s.isEmpty()</code> 是一个 Lambda 表达式，如果想换成方法引用的方式该怎么办呢？</p><p>可以以一个静态方法为“管道”来进行转换，该静态方法以一个方法引用为输入，再以特定的函数接口为其返回，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">as</span><span class="params">(Predicate&lt;T&gt; predicate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> predicate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，上面的代码就可以改成这样了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> count = Stream.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">""</span>, <span class="string">"c"</span>).filter(as(String::isEmpty).negate()).count();</span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p><code>map</code> 方法将流中的元素映射为其他的值，新的值类型可以和原来的元素类型不同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将字符转换成 ASCII 码</span></span><br><span class="line">Stream.of(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>).map(Object::hashCode).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p><code>map</code> 方法比较简单，但是使用的频率较高，这里我再举个栗子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 从文件中按行读取字符串，并将字符串逐行转换成实体对象</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> path 文件路径</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 转换后的实体类列表</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException 打开文件过程中的IO异常</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Entity&gt; <span class="title">parseToEntityList</span><span class="params">(Path path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (Stream&lt;String&gt; stream = Files.lines(path)) &#123;</span><br><span class="line">        <span class="keyword">return</span> stream.filter(as(String::isEmpty).negate())</span><br><span class="line">                .map(Entity::valueOf) <span class="comment">// 省略 Entity 类定义 和 valueOf 方法</span></span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细心的同学应该注意到了，这个例子在创建和使用流的时候使用了 <code>try-with-resources</code> 的形式，这是为啥呢？一般来讲，流不需要手动去关闭，终点操作执行完之后，流就自动关闭了。但是，对于 <code>Files.lines</code> 这种会打开外部资源的操作，操作完之后需要手动关闭，从而确保资源正确关闭，不会引起内存泄漏。<code>Files.lines</code> 的注释也写明白了：</p><blockquote><p>This method must be used within a try-with-resources statement or similar control structure to ensure that the stream’s open file is closed promptly after the stream’s operations have completed.</p></blockquote><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><p><code>flatMap</code> 方法结合了 <code>map</code> 和 <code>flattern</code> 的功能，它能将映射后的流的元素全部放入一个新的流中。该方法定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;R&gt; <span class="function">Stream&lt;R&gt; <span class="title">flatMap</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends Stream&lt;? extends R&gt;&gt; mapper)</span></span>;</span><br></pre></td></tr></table></figure><p>从<code>flatMap</code>的参数来看，mapper 函数接受一个参数并返回一个 Stream，最后 <code>flatMap</code> 方法返回的流会包含所有 mapper 返回的流的元素。简单来讲，<code>flatMap</code> 会将流中的每一个元素(常见的是集合)都转换成一个流，并将这些流合并起来生成一个新的流，个人感觉有点 “降维” 的意味。看个例子吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 将多个List 合并成一个 List</span></span><br><span class="line">List&lt;Integer&gt; numbers =</span><br><span class="line">        Stream.of(List.of(<span class="number">1</span>, <span class="number">2</span>), List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">                .flatMap(l -&gt; l.stream()) <span class="comment">// 可以替换成更简洁的方法引用形式 flatMap(List::stream)</span></span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">System.out.println(numbers); <span class="comment">// [1, 2, 1, 2, 3, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>拆开来写成这样会不会清楚一些呢：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;List&lt;Integer&gt;, Stream&lt;Integer&gt;&gt; mapper = List::stream;</span><br><span class="line">List&lt;Integer&gt; numbers =</span><br><span class="line">        Stream.of(List.of(<span class="number">1</span>, <span class="number">2</span>), List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">                .flatMap(mapper)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">System.out.println(numbers); <span class="comment">// [1, 2, 1, 2, 3, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>前面我们也提到了，方法引用是用于简化生成 Lambda 表达式的一种方式，而 Lambda 表达式都可以赋值给一个函数接口，这样是不是稍微清楚一些了，也就能清楚 <code>flatMap</code> 怎么使用了呢。</p><p>注： 无论是集合类，还是 Stream 都是使用的泛型接口，清楚的理解泛型及其限定关系(super, extends, ?)十分重要。</p><h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h4><p>对流进行排序可以通过 <code>sorted</code> 方法来实现，默认的<code>sorted()</code> 将流中的元素按照自然排序方式进行排序，也可以传入排序函数(Comparator接口)来指定排序的方式。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取系统变量，并按key的长度排序</span></span><br><span class="line">System.getenv()</span><br><span class="line">        .keySet()</span><br><span class="line">        .stream()</span><br><span class="line">        .sorted((x, y) -&gt; x.length() - y.length()) <span class="comment">// 还可简写为 .sorted(Comparator.comparingInt(String::length))</span></span><br><span class="line">        .forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>这比之前写匿名内部类的方式方便了不要太多，而且还可以通过先对流进行各种map、filter、distinct来减少元素数量后再排序，这样性能会好一点，且代码简洁清晰。</p><h3 id="终点操作"><a href="#终点操作" class="headerlink" title="终点操作"></a>终点操作</h3><p>当终点操作执行后，流就无法再操作了，所以终点操作是流的最后一个操作。</p><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p><code>forEach</code> 方法遍历流的每一个元素，执行指定的函数。前面的例子也多次用到了，比较简单，不再赘述。与其功能类似的一个中间操作是<code>peek</code>，<code>peek</code> 一般用于debug。</p><h4 id="findFirst-findAny"><a href="#findFirst-findAny" class="headerlink" title="findFirst / findAny"></a>findFirst / findAny</h4><p>这两个操作都是终点操作兼短路操作(short-circuiting)，即可以不用遍历完所有元素就终止操作的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; result =</span><br><span class="line">        Stream.of(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>)</span><br><span class="line">                .peek(s -&gt; System.out.println(<span class="string">"Iterated value: "</span> + s))</span><br><span class="line">                .findFirst();</span><br><span class="line">System.out.println(result.orElse(<span class="string">"Not found"</span>));</span><br></pre></td></tr></table></figure><p>这里值得注意的是，<code>findFirst</code> 和 <code>findAny</code> 返回的都是 <code>Optional</code>，可以将它理解为一个容器，它可能含有某个值，或者不包含。我们可以使用 <code>Optional</code> 来省去大量的丑陋的判空操作并有效的防止空指针异常。</p><p>回到一开始我们的例子，如果CharacterDao可能返回 <code>null</code> 的话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CharacterDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">List&lt;Character&gt; <span class="title">getCharacters</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">Character <span class="title">findOne</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在不使用 <code>Optional</code> 的情况下，可能会加上几行判空的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;Long, List&lt;Character&gt;&gt; groupCharacterByGamerWithStreamAPI() &#123;</span><br><span class="line">    List&lt;Character&gt; characters = characterDao.getCharacters();</span><br><span class="line">    <span class="comment">// 判空</span></span><br><span class="line">    <span class="keyword">if</span> (characters == <span class="keyword">null</span>) &#123;</span><br><span class="line">        characters = Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> characters</span><br><span class="line">            .stream()</span><br><span class="line">            .filter(character -&gt; character.getLevel() &gt; <span class="number">60</span>)</span><br><span class="line">            .collect(Collectors.groupingBy(Character::getGamerId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看下使用 <code>Optional</code> 的话，我们可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;Long, List&lt;Character&gt;&gt; groupCharacterByGamerWithStreamAPI() &#123;</span><br><span class="line">    List&lt;Character&gt; characters = characterDao.getCharacters();</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(characters)</span><br><span class="line">            .orElse(Collections.emptyList())</span><br><span class="line">            .stream()</span><br><span class="line">            .filter(character -&gt; character.getLevel() &gt; <span class="number">60</span>)</span><br><span class="line">            .collect(Collectors.groupingBy(Character::getGamerId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，看起来就简洁一些。再比如需要在返回结果为空的时候抛出异常，就可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Character <span class="title">findCharacterById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(characterDao.findOne(id))</span><br><span class="line">            .orElseThrow(() -&gt; <span class="keyword">new</span> IllegalArgumentException(id + <span class="string">" not exists"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p><code>reduce</code> 这个操作主要是把流中的元素组合起来生成一个值。它提供一个初始值(种子)，然后根据运算规则(BinaryOperator)，和前面Stream的第一个、第二个、第n个元素组合。通过<code>reduce</code>我们可以实现例如字符串拼接、数值求和等功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求和</span></span><br><span class="line"><span class="keyword">int</span> sum = IntStream.range(<span class="number">1</span>,<span class="number">5</span>).reduce(<span class="number">0</span>, (a,b) -&gt; a + b);</span><br><span class="line"><span class="comment">// 字符串拼接</span></span><br><span class="line">String contact = Stream.of(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>).reduce(<span class="string">""</span>, String::concat);</span><br><span class="line"><span class="comment">// 字符串拼接，无种子，返回值为Optional，注意与上面的区别</span></span><br><span class="line">contact = Stream.of(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>).reduce(String::concat).get();</span><br></pre></td></tr></table></figure><h4 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h4><p><code>collect</code> 在上面的例子也见过很多次了，这个操作是一个可变聚合(mutable reduction)操作，能将流中的元素累积到一个可变容器中。<code>java.util.stream.Collectors</code>这个辅助类来辅助进行各种reduction操作。</p><p><code>Collectors</code> 主要包含了一些特定的收集器，如平均值<code>averagingInt</code>、最大最小值<code>maxBy</code> <code>minBy</code>、计数<code>counting</code>、分组<code>groupingBy</code>、字符串连接<code>joining</code>、分区<code>partitioningBy</code>、汇总<code>summarizingInt</code>、化简<code>reducing</code>、转换<code>toXXX</code>等。</p><p>下面举几个栗子：</p><p><strong>averagingInt</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求字符串长度平均值</span></span><br><span class="line">Double avg = Stream.of(<span class="string">"abc"</span>, <span class="string">"bc"</span>, <span class="string">"c"</span>).collect(Collectors.averagingInt(String::length));</span><br></pre></td></tr></table></figure><p><strong>groupingBy</strong></p><p>分组，在开头的例子里我们就使用到了分组，这里就不另举例子了。</p><p><strong>partitioningBy</strong></p><p>分区，其实是一种特殊的 <code>groupingBy</code>，它依照条件测试的是否两种结果来构造返回的数据结构。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按等级是否大于60分区</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;Boolean, List&lt;Character&gt;&gt; pationCharacterByLevel60() &#123;</span><br><span class="line">    List&lt;Character&gt; characters = characterDao.getCharacters();</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(characters)</span><br><span class="line">            .orElse(Collections.emptyList())</span><br><span class="line">            .stream()</span><br><span class="line">            .collect(Collectors.partitioningBy(character -&gt; character.getLevel() &gt; <span class="number">60</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0xXX-参考资料"><a href="#0xXX-参考资料" class="headerlink" title="0xXX 参考资料"></a>0xXX 参考资料</h2><ul><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html" target="_blank" rel="noopener">Java 8 中的 Streams API 详解</a></li><li><a href="http://blog.oneapm.com/apm-tech/226.html" target="_blank" rel="noopener">深入浅出 Java 8 Lambda 表达式</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Stream API 是 Java 8 新引入的特性，用来增强集合操作。前段时间，在开发新需求以及重构老代码的时候，我开始尝试使用Java Stream API，使写出的代码更简洁也更易维护。这篇文章便对 Java Stream API 做一个总结，也记录一下我在使用过程中的一些心得和技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://tomoyadeng.github.io/blog/categories/Java/"/>
    
    
      <category term="Java" scheme="https://tomoyadeng.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用Spring AOP &amp; 自定义注解 记录日志</title>
    <link href="https://tomoyadeng.github.io/blog/2018/09/24/logging-with-aop-and-annotation/"/>
    <id>https://tomoyadeng.github.io/blog/2018/09/24/logging-with-aop-and-annotation/</id>
    <published>2018-09-24T04:04:16.000Z</published>
    <updated>2018-10-12T16:07:56.406Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><a id="more"></a><h2 id="0x00-一切为了少写代码"><a href="#0x00-一切为了少写代码" class="headerlink" title="0x00 一切为了少写代码"></a>0x00 一切为了少写代码</h2><p>最近在重构一块儿业务代码的时候发现：有好几个类中有大量重复的代码，其实都在干同一件事，就是记录方法执行所耗时间，代码大概长这个样子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// doSomeTimeConsumingTasks</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> cost = System.currentTimeMillis() - start;</span><br><span class="line">        <span class="keyword">if</span> (cost &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">            logger.info(<span class="string">"doSomething cost &#123;&#125;s"</span>, cost / <span class="number">1000.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数了一数，在一个方法里和具体业务并无关系的日志记录代码就占了8行。不对，在我们部门的code style里，左边的大括号是要换行的，代码应该长这个样子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// doSomeTimeConsumingTasks</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> cost = System.currentTimeMillis() - start;</span><br><span class="line">        <span class="keyword">if</span> (cost &gt; <span class="number">1000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            logger.info(<span class="string">"doSomething cost &#123;&#125;s"</span>, cost / <span class="number">1000.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在和具体业务并无关系的日志记录代码就变成12行了，如果多写几遍这样的方法，大概一个月的代码量KPI就够了。</p><p>不过，要做一个还算有点追求的程序猿，还是要力求在实现相同功能的前提下少写代码的，毕竟代码多了会让人没有读下去的欲望，不利于后期维护。</p><h2 id="0x01-高举-Spring-AOP-大旗"><a href="#0x01-高举-Spring-AOP-大旗" class="headerlink" title="0x01 高举 Spring AOP 大旗"></a>0x01 高举 Spring AOP 大旗</h2><p>使用过Spring AOP 的同学想必遇到这种重复日志的问题，早就计上心来：“给我一个切面，我能把你都记下来”。</p><p>最初的我也是这么想的，花了几分钟，定义了一个切面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomoyadeng.springbootutils.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.tomoyadeng.springbootutils.service.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logPointCut</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"logPointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">logTimeCost</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature) pjp.getSignature();</span><br><span class="line">        <span class="comment">// 根据方法签名拿到方法的类，并通过类获取对应的logger</span></span><br><span class="line">        Logger logger = LoggerFactory.getLogger(signature.getMethod().getDeclaringClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拿到函数上注解内的msg 和 threshold</span></span><br><span class="line">        Method m = signature.getMethod();</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(throwable);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> cost = System.currentTimeMillis() - start;</span><br><span class="line">            <span class="comment">// 记录日志</span></span><br><span class="line">            <span class="keyword">if</span> (cost &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">                logger.info(<span class="string">"&#123;&#125; cost &#123;&#125;s"</span>, m.getName(), cost / <span class="number">1000.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写个测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomoyadeng.springbootutils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tomoyadeng.springbootutils.service.CustomizeService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogTimeCostTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> CustomizeService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLogForCostTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        service.someMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跑一下看看，果然能在日志中看到对应的日志</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-09-24 00:58:24.963  INFO 6808 --- [           main] c.t.s.service.CustomizeService           : someMethod cost 1.006s</span><br></pre></td></tr></table></figure><p>日志记录算是基本完成了，不过仔细一想，这样会存在两个问题：</p><ol><li>该包下并不是所有的类的公有方法都要记录耗时日志，有没有精确控制的办法呢？</li><li>不是所有的方法记录耗时日志的阈值都是1000ms，有没有参数控制的办法呢？</li></ol><h2 id="0x02-插上注解的翅膀"><a href="#0x02-插上注解的翅膀" class="headerlink" title="0x02 插上注解的翅膀"></a>0x02 插上注解的翅膀</h2><p>回想我们在开发Spring应用时，经常会使用各种各样的注解来增强功能，比如<code>@GetMapping</code>， <code>@ComponentScan</code>等，那么上面提到的问题就可以通过注解来解决了。</p><p>首先，新建一个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomoyadeng.springbootutils.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LogTimeCost &#123;</span><br><span class="line">    <span class="comment">// 自定义日志中写入的消息</span></span><br><span class="line">    <span class="function">String <span class="title">msg</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义记录耗时日志的阈值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">threshold</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后，对之前的切面进行改造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomoyadeng.springbootutils.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tomoyadeng.springbootutils.annotation.LogTimeCost;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.tomoyadeng.springbootutils.annotation.LogTimeCost)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logPointCut</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"logPointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">logTimeCost</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature) pjp.getSignature();</span><br><span class="line">        <span class="comment">// 根据方法签名拿到方法的类，并通过类获取对应的logger</span></span><br><span class="line">        Logger logger = LoggerFactory.getLogger(signature.getMethod().getDeclaringClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拿到函数上注解内的msg 和 threshold</span></span><br><span class="line">        Method m = signature.getMethod();</span><br><span class="line">        String msg = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> threshold = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (m.isAnnotationPresent(LogTimeCost.class)) &#123;</span><br><span class="line">            LogTimeCost annotation = m.getAnnotation(LogTimeCost.class);</span><br><span class="line">            msg = annotation.msg();</span><br><span class="line">            threshold = annotation.threshold();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(throwable);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> cost = System.currentTimeMillis() - start;</span><br><span class="line">            <span class="comment">// 记录日志</span></span><br><span class="line">            <span class="keyword">if</span> (cost &gt; threshold) &#123;</span><br><span class="line">                logger.info(<span class="string">"&#123;&#125; [&#123;&#125;] cost &#123;&#125;s"</span>, m.getName(), msg, cost / <span class="number">1000.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，在需要记录耗时的方法前加上LogTimeCost注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LogTimeCost</span>(msg = <span class="string">"sleep 1 s"</span>, threshold = <span class="number">500</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，再跑一下测试</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-09-24 01:20:55.267  INFO 11748 --- [           main] c.t.s.service.CustomizeService           : someMethod [sleep 1 s] cost 1.007s</span><br></pre></td></tr></table></figure><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>通过 Spring AOP 结合自定义注解，可以实现精确记录某些方法的耗时时间，这种方式简单方便，可以少写很多重复代码。但值得注意的是，这种方式还是存在一些限制的，这种方式只能用于public的方法上，这是由Spring AOP的实现原理决定的。可以参考官方文档的解释：</p><p><a href="https://docs.spring.io/spring/docs/4.1.x/spring-framework-reference/html/aop.html#aop-pointcuts-designators" target="_blank" rel="noopener">9.2.3 Declaring a pointcut#Supported Pointcut Designators</a></p><blockquote><p>Due to the proxy-based nature of Spring’s AOP framework, protected methods are by definition not intercepted, neither for JDK proxies (where this isn’t applicable) nor for CGLIB proxies (where this is technically possible but not recommendable for AOP purposes). As a consequence, any given pointcut will be matched against public methods only!</p></blockquote><blockquote><p>If your interception needs include protected/private methods or even constructors, consider the use of Spring-driven native AspectJ weaving instead of Spring’s proxy-based AOP framework. This constitutes a different mode of AOP usage with different characteristics, so be sure to make yourself familiar with weaving first before making a decision.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;0x00-一切为了少写代码&quot;&gt;
      
    
    </summary>
    
      <category term="Framework" scheme="https://tomoyadeng.github.io/blog/categories/Framework/"/>
    
    
      <category term="spring" scheme="https://tomoyadeng.github.io/blog/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>K8s折腾日记(三)--为MySQL提供REST API</title>
    <link href="https://tomoyadeng.github.io/blog/2018/09/23/springboot-k8s-3/"/>
    <id>https://tomoyadeng.github.io/blog/2018/09/23/springboot-k8s-3/</id>
    <published>2018-09-23T03:10:13.000Z</published>
    <updated>2018-10-12T16:09:17.358Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在上一次的日志中，已经在 Kubernetes 中部署了一个单实例的 MySQL，接下来就是创建一个微服务来提供 MySQL 的 REST API， 让其他微服务能够通过 REST API 来访问数据库中的资源。</p><a id="more"></a><p><a href="https://github.com/tomoyadeng/demo-springboot-k8s" target="_blank" rel="noopener">本项目源码</a></p><h2 id="0x01-新建-Spring-boot-服务"><a href="#0x01-新建-Spring-boot-服务" class="headerlink" title="0x01 新建 Spring boot 服务"></a>0x01 新建 Spring boot 服务</h2><p>在原有的父工程下新建一个 Module 命名为 <code>k8s-db</code>，新增如下的依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</span><br><span class="line">compile(<span class="string">"org.springframework.boot:spring-boot-starter-data-jpa"</span>)</span><br><span class="line">compile <span class="string">'mysql:mysql-connector-java'</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'javax.xml.bind'</span>, <span class="string">name:</span> <span class="string">'jaxb-api'</span>, <span class="string">version:</span> <span class="string">'2.3.0'</span></span><br></pre></td></tr></table></figure><p>注： <code>k8s-db</code> 是 <code>demo-springboot-k8s</code> 下的子工程，会继承在父工程引入的一些依赖包和定义的 task。<code>jaxb-api</code> 是在使用 JDK 9 以上的 JDK 版本时需要引入的依赖，因为它是 Java EE 里面的 module，在JDK 9 之后便从默认的包里面移除了，需要手动引入。</p><h3 id="使用-Spring-JPA-进行数据访问"><a href="#使用-Spring-JPA-进行数据访问" class="headerlink" title="使用 Spring JPA 进行数据访问"></a>使用 Spring JPA 进行数据访问</h3><ol><li><p>创建一个 Application class</p><p> 新建文件 <code>com/tomoyadeng/demo/springboot/k8s/db/K8sDbApplication.java</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomoyadeng.demo.springboot.k8s.db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">K8sDbApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(K8sDbApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义一个简单的 Entity</p><p> 新建文件 <code>com/tomoyadeng/demo/springboot/k8s/db/domain/Person.java</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomoyadeng.demo.springboot.k8s.db.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 JPA repository 提供简单查询</p><p> 新建文件 <code>com/tomoyadeng/demo/springboot/k8s/db/repository/PersonRepository.java</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomoyadeng.demo.springboot.k8s.db.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tomoyadeng.demo.springboot.k8s.db.domain.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.CrudRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Person</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByLastName</span><span class="params">(String lastName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>上面这几步操作是使用 Spring JPA 进行数据访问的步骤，参考 <a href="https://spring.io/guides/gs/accessing-data-jpa/" target="_blank" rel="noopener">Accessing Data with JPA</a></p><h3 id="创建-RestController"><a href="#创建-RestController" class="headerlink" title="创建 RestController"></a>创建 RestController</h3><p>新建文件 <code>com/tomoyadeng/demo/springboot/k8s/db/controller/PersonController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomoyadeng.demo.springboot.k8s.db.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tomoyadeng.demo.springboot.k8s.db.domain.Person;</span><br><span class="line"><span class="keyword">import</span> com.tomoyadeng.demo.springboot.k8s.db.repository.PersonRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonRepository personRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">List&lt;Person&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Person&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        personRepository.findAll().forEach(results::add);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Person <span class="title">add</span><span class="params">(@RequestBody Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> personRepository.save(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Person <span class="title">update</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id,</span></span><br><span class="line"><span class="function">            @RequestBody Person person) </span>&#123;</span><br><span class="line">        Assert.isTrue(id == person.getId(), <span class="string">"id not match"</span>);</span><br><span class="line">        <span class="keyword">return</span> personRepository.save(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        personRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x02-本地测试"><a href="#0x02-本地测试" class="headerlink" title="0x02 本地测试"></a>0x02 本地测试</h2><p>经过上面的步骤，一个使用 JPA 访问数据库的 Spring boot 的简单微服务就基本算是创建完了，下面需要在本地进行测试，看 REST API 能否正常访问。</p><p>使用 Sping profiles 来定义不同运行环境下的环境变量以及其他参数，我这里本地开发环境(Win10)定义为 <code>dev</code>，默认便使用 <code>dev</code>。</p><p>新建 <code>application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>新建 <code>application-dev.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/k8s?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>需要提前在本地安装好 MySQL， 并新建一个名为 k8s 的数据库。</p><p>Spring boot 应用启动后，URL： <code>http://localhost:8080/person</code> 能正常访问即可。</p><h2 id="0x03-构建-Docker-镜像"><a href="#0x03-构建-Docker-镜像" class="headerlink" title="0x03 构建 Docker 镜像"></a>0x03 构建 Docker 镜像</h2><p>要使这个 Spring boot 应用跑在 Kubernetes 上，还是照例要先把它构建成 Docker 镜像。首先，要先新建一个 k8s 的 Spring profile。</p><p>新建文件： <code>application-k8s.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">k8s</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://$&#123;MYSQL_HOST&#125;:$&#123;MYSQL_PORT&#125;/k8s?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">$&#123;MYSQL_USER&#125;</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">$&#123;MYQL_PASSWD&#125;</span></span><br></pre></td></tr></table></figure><p>MYSQL_HOST 等变量均需要在启动 docker 容器时注入。</p><p>随后便可以构建一个 docker 镜像了，我这里使用 gradle 来直接构建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle build buildDocker</span><br></pre></td></tr></table></figure><h2 id="0x04-部署-k8s-db-微服务到-Kubernetes"><a href="#0x04-部署-k8s-db-微服务到-Kubernetes" class="headerlink" title="0x04 部署 k8s-db 微服务到 Kubernetes"></a>0x04 部署 k8s-db 微服务到 Kubernetes</h2><h3 id="新建-k8s-数据库"><a href="#新建-k8s-数据库" class="headerlink" title="新建 k8s 数据库"></a>新建 k8s 数据库</h3><p>在部署 k8s-db 微服务之前，需要先在 MySQL 中创建使用到的db，使用 <code>kubectl exec</code> 命令进入已经启动的容器的bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it mysql-client-585479c646-nzl8m -- mysql -h mysql -p123456</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> k8s;</span><br></pre></td></tr></table></figure><p>这样，数据库就创建好了，接下来部署 k8s-db 微服务。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>新建文件 <code>k8s-db.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">k8s-db</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">k8s-db</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">k8s-db</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">k8s-db</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">k8s-db</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">k8s-db</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">k8s-db</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">k8s-db</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">com.tomoyadeng/k8s-db:1.1</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">          env:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">MYSQL_HOST</span></span><br><span class="line"><span class="attr">              value:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">MYSQL_PORT</span></span><br><span class="line"><span class="attr">              value:</span> <span class="string">'3306'</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">MYSQL_USER</span></span><br><span class="line"><span class="attr">              valueFrom:</span></span><br><span class="line"><span class="attr">                secretKeyRef:</span></span><br><span class="line"><span class="attr">                  name:</span> <span class="string">mysql-pass</span></span><br><span class="line"><span class="attr">                  key:</span> <span class="string">username</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">MYQL_PASSWD</span></span><br><span class="line"><span class="attr">              valueFrom:</span></span><br><span class="line"><span class="attr">                secretKeyRef:</span></span><br><span class="line"><span class="attr">                  name:</span> <span class="string">mysql-pass</span></span><br><span class="line"><span class="attr">                  key:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure><p>通过 <code>kubectl create -f k8s-db.yaml</code> 部署：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@k8s:~/k8s# kubectl create -f k8s-db.yaml</span><br><span class="line">service/k8s-db created</span><br><span class="line">deployment.apps/k8s-db created</span><br></pre></td></tr></table></figure><p>随后便可以通过 <code>kubectl get pod</code> 看到新启动的 pod 了。</p><h2 id="0x05-参考资料"><a href="#0x05-参考资料" class="headerlink" title="0x05 参考资料"></a>0x05 参考资料</h2><ul><li><a href="https://spring.io/guides/gs/accessing-data-jpa/" target="_blank" rel="noopener">Accessing Data with JPA</a></li><li><a href="https://github.com/IBM/spring-boot-microservices-on-kubernetes/blob/master/README-cn.md" target="_blank" rel="noopener">在 Kubernetes 上构建和部署 Java Spring Boot 微服务</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一次的日志中，已经在 Kubernetes 中部署了一个单实例的 MySQL，接下来就是创建一个微服务来提供 MySQL 的 REST API， 让其他微服务能够通过 REST API 来访问数据库中的资源。&lt;/p&gt;
    
    </summary>
    
      <category term="Cloud Computing" scheme="https://tomoyadeng.github.io/blog/categories/Cloud-Computing/"/>
    
    
      <category term="kubernetes" scheme="https://tomoyadeng.github.io/blog/tags/kubernetes/"/>
    
      <category term="mysql" scheme="https://tomoyadeng.github.io/blog/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>K8s折腾日记(二)--在Kubernetes中部署一个单实例有状态的应用</title>
    <link href="https://tomoyadeng.github.io/blog/2018/09/16/springboot-k8s-2/"/>
    <id>https://tomoyadeng.github.io/blog/2018/09/16/springboot-k8s-2/</id>
    <published>2018-09-16T03:52:22.000Z</published>
    <updated>2018-10-12T16:09:01.809Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>之前已经尝试在Kubernetes中部署了一个简单的Spring boot应用，但这个应用是无状态的，这次主要折腾一下如何运行一个单实例有状态应用(MySQL)</p><a id="more"></a><h2 id="0x01-定义持久化磁盘"><a href="#0x01-定义持久化磁盘" class="headerlink" title="0x01 定义持久化磁盘"></a>0x01 定义持久化磁盘</h2><p>Kubernetes 中使用 Volume 来持久化保存容器的数据，Volume 的生命周期独立于容器， Pod 中的容器可能频繁的被销毁和重建，但 Volume 会被保留。</p><p>从本质上来将， Kubernetes Volume 是一个目录，但 Volume 提供了对各种backend 的抽象，容器使用 Volume 时不用关心数据到底是存在本地节点的文件系统中还是类似 EBS 这种云硬盘中。</p><p>接下来，就通过 <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/" target="_blank" rel="noopener">PersistentVolume</a> 定义一个持久化磁盘：</p><p>为了方便，使用 hostPath 这种 Volume，这种类型是映射到主机上目录的卷，应该只用于测试目的或者单节点集群。</p><p>新建 <code>local-volume.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  capacity:</span></span><br><span class="line"><span class="attr">    storage:</span> <span class="number">5</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">  volumeMode:</span> <span class="string">Filesystem</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"><span class="attr">  hostPath:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/data/mysql</span></span><br></pre></td></tr></table></figure><p>创建持久卷：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f <span class="built_in">local</span>-volume.yaml</span><br></pre></td></tr></table></figure><p>随后就能通过 <code>kubectl get pv</code> 看到刚创建好的 PV 了。</p><h2 id="0x02-创建-MySQL-密码-Secret"><a href="#0x02-创建-MySQL-密码-Secret" class="headerlink" title="0x02 创建 MySQL 密码 Secret"></a>0x02 创建 MySQL 密码 Secret</h2><p>在 Kubernetes 中可以通过 <a href="https://kubernetes.io/docs/concepts/configuration/secret/" target="_blank" rel="noopener">Secret</a> 对象来保存类似于数据库用户名、密码或者密钥等敏感信息。Secret 会以密文的方式存储数据，避免了直接在配置文件中保存敏感信息，且 Secret 会以 Volume 的形式 mount 到 Pod，这样容器便可以使用这些数据了。</p><p>接下来通过yaml文件来创建数据库的 Secret，yaml文件中的敏感数据必须是通过 base64 编码后的结果。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@k8s:~# echo -n root | base64</span><br><span class="line">cm9vdA==</span><br><span class="line">root@k8s:~# echo -n 123456 | base64</span><br><span class="line">MTIzNDU2</span><br></pre></td></tr></table></figure><p>新建 <code>mysql-secret.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-pass</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line"><span class="attr">  username:</span> <span class="string">cm9vdA==</span></span><br><span class="line"><span class="attr">  password:</span> <span class="string">MTIzNDU2</span></span><br></pre></td></tr></table></figure><p>创建 Secret</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f mysql-secret.yaml</span><br></pre></td></tr></table></figure><p>随后便能通过 <code>kubectl get secret</code> 查看刚才创建的 Secret</p><h2 id="0x03-部署-MySQL"><a href="#0x03-部署-MySQL" class="headerlink" title="0x03 部署 MySQL"></a>0x03 部署 MySQL</h2><p>PersistentVolume (PV) 是外部存储系统的一块存储空间，在 Kubernetes 中，可通过 PersistentVolumeClaim (PVC) 来申请现已存在的 PV 的使用。</p><p>接下来通过yaml文件部署 MySQL：</p><p>新建 <code>mysql-deployment.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-pv-claim</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="attr">    requests:</span></span><br><span class="line"><span class="attr">      storage:</span> <span class="number">5</span><span class="string">Gi</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">  strategy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">Recreate</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="attr">mysql:5.6</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            secretKeyRef:</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">mysql-pass</span></span><br><span class="line"><span class="attr">              key:</span> <span class="string">password</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">mysql-persistent-storage</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">mysql-persistent-storage</span></span><br><span class="line"><span class="attr">        persistentVolumeClaim:</span></span><br><span class="line"><span class="attr">          claimName:</span> <span class="string">mysql-pv-claim</span></span><br></pre></td></tr></table></figure><p>部署 MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f mysql-deployment.yaml</span><br></pre></td></tr></table></figure><p>随后便能通过 <code>kubectl get pod</code> 查看到部署的mysql了。</p><h2 id="0x04-访问-MySQL-实例"><a href="#0x04-访问-MySQL-实例" class="headerlink" title="0x04 访问 MySQL 实例"></a>0x04 访问 MySQL 实例</h2><p>运行MySQL客户端以连接到服务器:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl run -it --rm --image=mysql:5.6 mysql-client -- mysql -h &lt;pod-ip&gt; -p&lt;password&gt;</span><br></pre></td></tr></table></figure><p>这个命令在集群内创建一个新的Pod并运行MySQL客户端,并通过服务将其连接到服务器.如果连接成功,就知道有状态的MySQL database正处于运行状态.</p><pre><code>root@k8s:~/k8s# kubectl run -it --rm --image=mysql:5.6 mysql-client -- mysql -h mysql -p123456If you don&apos;t see a command prompt, try pressing enter.mysql&gt;</code></pre><p>至此，单实例的 MySQL 就在 Kubernetes 中部署成功了。</p><h2 id="0x05-参考资料"><a href="#0x05-参考资料" class="headerlink" title="0x05 参考资料"></a>0x05 参考资料</h2><ul><li><a href="https://kubernetes.io/cn/docs/tasks/run-application/run-single-instance-stateful-application/" target="_blank" rel="noopener">运行一个单实例有状态应用</a></li><li><a href="https://kubernetes.io/cn/docs/tutorials/stateful-application/mysql-wordpress-persistent-volume/" target="_blank" rel="noopener">基于 Persistent Volumes 搭建 WordPress 和 MySQL 应用</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前已经尝试在Kubernetes中部署了一个简单的Spring boot应用，但这个应用是无状态的，这次主要折腾一下如何运行一个单实例有状态应用(MySQL)&lt;/p&gt;
    
    </summary>
    
      <category term="Cloud Computing" scheme="https://tomoyadeng.github.io/blog/categories/Cloud-Computing/"/>
    
    
      <category term="kubernetes" scheme="https://tomoyadeng.github.io/blog/tags/kubernetes/"/>
    
      <category term="mysql" scheme="https://tomoyadeng.github.io/blog/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>K8s折腾日记(一)--在Kubernetes中部署spring boot应用</title>
    <link href="https://tomoyadeng.github.io/blog/2018/09/13/springboot-k8s-1/"/>
    <id>https://tomoyadeng.github.io/blog/2018/09/13/springboot-k8s-1/</id>
    <published>2018-09-13T15:22:43.000Z</published>
    <updated>2018-10-12T16:08:47.602Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>基于容器的微服务架构目前已经成为了开发应用系统的主流，Kubernetes 则是运行微服务应用的理想平台。基于没事儿瞎折腾的态度，自己最近有空闲时间也开始鼓捣起了k8s，经过一步步摸索，终于完成安装和部署。接下来就先分享一下怎么在 kubernetes 中部署一个简单 Spring boot 的应用。</p><a id="more"></a><h2 id="0x00-环境准备"><a href="#0x00-环境准备" class="headerlink" title="0x00 环境准备"></a>0x00 环境准备</h2><ul><li>minikube</li><li>gradle</li></ul><p>minikube 的安装可以参考<a href="https://yq.aliyun.com/articles/574255" target="_blank" rel="noopener">使用minikube安装k8s单节点集群</a></p><h2 id="0x01-构建-Spring-boot-应用"><a href="#0x01-构建-Spring-boot-应用" class="headerlink" title="0x01 构建 Spring boot 应用"></a>0x01 构建 Spring boot 应用</h2><p>首先，新建一个Spring Boot应用，姑且命名为<code>k8s-service</code>，这个应用就提供一个简单的接口，便于验证是否部署成功。</p><p>MainClass:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomoyadeng.demo.springboot.k8s.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">K8sServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(K8sServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RestController:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomoyadeng.demo.springboot.k8s.service.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, Kubernetes!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来写个测试用例，在本地跑一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomoyadeng.demo.springboot.k8s.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.equalTo;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">K8sServiceApplicationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">"Hello, Kubernetes!"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码参考<a href="https://github.com/tomoyadeng/demo-springboot-k8s" target="_blank" rel="noopener">Github</a></p><h2 id="0x02-将应用打包成-Docker-镜像"><a href="#0x02-将应用打包成-Docker-镜像" class="headerlink" title="0x02 将应用打包成 Docker 镜像"></a>0x02 将应用打包成 Docker 镜像</h2><p>接下来就需要把 Spring boot 应用打包成 docker 镜像了，这样才能在 kubernetes 中运行。将 Spring boot 应用打包成docker镜像可以选择通过 Dockerfile 的方式，或者借助构建工具进行构建。我这里选择借助 gradle 来构建 docker 镜像(使用se.transmode.gradle:gradle-docker:1.2 插件)，在 build.gradle 定义构建docker镜像的任务：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker &#123;</span><br><span class="line">    baseImage <span class="string">"openjdk:8-slim"</span></span><br><span class="line">    maintainer <span class="string">'tomoyadeng@gmail.com'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task buildDocker(<span class="string">type:</span> Docker, <span class="string">dependsOn:</span> build) &#123;</span><br><span class="line">    applicationName = bootJar.baseName</span><br><span class="line">    tagVersion = bootJar.version</span><br><span class="line">    doFirst &#123;</span><br><span class="line">        copy &#123;</span><br><span class="line">            from bootJar</span><br><span class="line">            into stageDir</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    volume <span class="string">"/tmp"</span></span><br><span class="line">    addFile(<span class="string">"$&#123;bootJar.baseName&#125;-$&#123;bootJar.version&#125;.jar"</span>, <span class="string">"app.jar"</span>)</span><br><span class="line">    entryPoint(Arrays.asList(<span class="string">"java"</span>, <span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>, <span class="string">"-Dspring.profiles.active=k8s"</span>, <span class="string">"-jar"</span>, <span class="string">"/app.jar"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行 <code>gradle build buildDocker</code> 就能构建出docker镜像，构建完成后可以通过 <code>docker images</code> 查看。</p><h2 id="0x03-将镜像部署到kubernetes中"><a href="#0x03-将镜像部署到kubernetes中" class="headerlink" title="0x03 将镜像部署到kubernetes中"></a>0x03 将镜像部署到kubernetes中</h2><h3 id="创建-Deployment"><a href="#创建-Deployment" class="headerlink" title="创建 Deployment"></a>创建 Deployment</h3><p>Kubernetes Pod 是由一个或多个容器为了管理和联网的目的而绑定在一起构成的组。Deployment 是管理 Pod 创建和伸缩的推荐方法。要部署刚才构建好的容器镜像，首先要创建 Deployment。</p><p>新建 <code>k8s-service.yaml</code> 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">k8s-service</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">k8s-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">k8s-service</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">k8s-service</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">k8s-service</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">com.tomoyadeng/k8s-service:1.0</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>运行 <code>kubectl create -f k8s-service.yaml</code> 创建 Deployment，创建完成后可以通过 <code>kubectl get deployments</code> 查看 deployment，通过 <code>kubectl get pods</code> 查看 pod。</p><h3 id="创建-Service"><a href="#创建-Service" class="headerlink" title="创建 Service"></a>创建 Service</h3><p>默认情况下，Pod 只能通过 Kubernetes 集群中的内部 IP 地址访问。要使得 k8s-service 容器可以从 Kubernetes 虚拟网络的外部访问，您必须将 Pod 暴露为 Kubernetes Service。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment k8s-service --type=LoadBalancer</span><br></pre></td></tr></table></figure><p>随后可以通过 <code>curl $(minikube service k8s-service --url)/hello</code> 验证部署是否成功。部署的pod的日志可以通过 <code>kubectl log &lt;Pod Name&gt;</code> 来查看。</p><p>完整代码参考<a href="https://github.com/tomoyadeng/demo-springboot-k8s" target="_blank" rel="noopener">Github</a></p><h2 id="0x04-参考资料"><a href="#0x04-参考资料" class="headerlink" title="0x04 参考资料"></a>0x04 参考资料</h2><ul><li><a href="https://k8smeetup.github.io/docs/tutorials/stateless-application/hello-minikube/" target="_blank" rel="noopener">你好 Minikube</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于容器的微服务架构目前已经成为了开发应用系统的主流，Kubernetes 则是运行微服务应用的理想平台。基于没事儿瞎折腾的态度，自己最近有空闲时间也开始鼓捣起了k8s，经过一步步摸索，终于完成安装和部署。接下来就先分享一下怎么在 kubernetes 中部署一个简单 Spring boot 的应用。&lt;/p&gt;
    
    </summary>
    
      <category term="Cloud Computing" scheme="https://tomoyadeng.github.io/blog/categories/Cloud-Computing/"/>
    
    
      <category term="kubernetes" scheme="https://tomoyadeng.github.io/blog/tags/kubernetes/"/>
    
      <category term="spring boot" scheme="https://tomoyadeng.github.io/blog/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>一致性哈希算法的一次实践</title>
    <link href="https://tomoyadeng.github.io/blog/2018/06/09/consistent-hashing-practice/"/>
    <id>https://tomoyadeng.github.io/blog/2018/06/09/consistent-hashing-practice/</id>
    <published>2018-06-09T14:18:17.000Z</published>
    <updated>2018-09-13T15:52:47.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近在分析一个需求，需要开发一个采集器的调度框架，实现采集器的注册，离线以及采集任务分配(负载均衡)。</p><p>采集器用于登录到网络设备上采集数据，部分运营商考虑到设备性能问题，会限制同时只能有一个用户登录设备查询数据。那么在此限制下，分配采集任务时需要保证：</p><ul><li>对于同一设备的任务始终都落在同一个采集器上去执行，才能保证同一时刻对于同一设备不会有多个采集器采集。</li><li>而且，需要保证在某个采集器失效离线时，之前落在该采集器上的设备列表需要均匀分布到剩下的采集器上去，不至于造成某一个采集器负载过大。</li></ul><p>到这里，实现方案已经呼之欲出，这不就是解决分布式缓存问题的套路么 — 一致性哈希算法，可以参考这篇文章进行了解 <a href="http://blog.codinglabs.org/articles/consistent-hashing.html" target="_blank" rel="noopener">《一致性哈希算法及其在分布式系统中的应用》</a></p><a id="more"></a><h3 id="0x01-接口定义"><a href="#0x01-接口定义" class="headerlink" title="0x01 接口定义"></a>0x01 接口定义</h3><p>首先，对几个关键角色进行接口抽象</p><h4 id="网络设备"><a href="#网络设备" class="headerlink" title="网络设备"></a>网络设备</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 网络设备</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Device</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取设备IP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> IP</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getIp</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="采集器"><a href="#采集器" class="headerlink" title="采集器"></a>采集器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collector</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取采集器IP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> IP</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getIp</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置采集器IP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ip IP</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setIp</span><span class="params">(String ip)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行采集任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> device 采集对象--设备</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commands 采集命令</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 采集结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">collect</span><span class="params">(Device device, List&lt;String&gt; commands)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h4><p>这里把采集器的调度框架抽象成集群，并且使用泛型来定义集群接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调度框架(可看作集群管理)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cluster</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 离线</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">offline</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 负载均衡</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ip 源IP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> T</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">choose</span><span class="params">(String ip)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x02-算法实现"><a href="#0x02-算法实现" class="headerlink" title="0x02 算法实现"></a>0x02 算法实现</h3><h4 id="Hash算法选择"><a href="#Hash算法选择" class="headerlink" title="Hash算法选择"></a>Hash算法选择</h4><p>在选择设备对应的采集器时，需要对设备的IP进行hash计算。由于设备的IP前缀基本一致，使用默认的字符串hash算法会导致计算出来的hash值不够离散，只能落在hash环上很小的一段区间。因此需要重新选择一种hash算法，保证字符串hash的离散性。这里使用<a href="https://dustin.sallings.org/java-memcached-client/apidocs/net/spy/memcached/HashAlgorithm.html#FNV1_32_HASH" target="_blank" rel="noopener">FNV1_32_HASH</a>算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * FNV1_32_HASH</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> str str</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> hash</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rehash</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> p = <span class="number">16777619</span>;</span><br><span class="line">    <span class="keyword">int</span> hash = (<span class="keyword">int</span>) <span class="number">2166136261L</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        hash = (hash ^ str.charAt(i)) * p;</span><br><span class="line">    &#125;</span><br><span class="line">    hash += hash &lt;&lt; <span class="number">13</span>;</span><br><span class="line">    hash ^= hash &gt;&gt; <span class="number">7</span>;</span><br><span class="line">    hash += hash &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    hash ^= hash &gt;&gt; <span class="number">17</span>;</span><br><span class="line">    hash += hash &lt;&lt; <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hash &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        hash = Math.abs(hash);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@author</span> tomoya */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectorCluster</span> <span class="keyword">implements</span> <span class="title">Cluster</span>&lt;<span class="title">Collector</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 每个采集器定义虚拟节点个数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VIRTUAL_NODE_NUMBER = <span class="number">320</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 采集器--所有虚拟节点hash值数组 映射关系 */</span></span><br><span class="line">    <span class="meta">@GuardedBy</span>(<span class="string">"clusterLock"</span>)</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Collector, <span class="keyword">int</span>[]&gt; registeredServers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** hash环上的hash值--采集器 映射关系 */</span></span><br><span class="line">    <span class="meta">@GuardedBy</span>(<span class="string">"clusterLock"</span>)</span><br><span class="line">    <span class="keyword">private</span> TreeMap&lt;Integer, Collector&gt; hashRingMap = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ReadWriteLock clusterLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Collector collector)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"add server "</span> + collector.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Lock lock = clusterLock.writeLock();</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 计算采集器所有虚拟节点的hash值，并将所有hash值注册到hash环上</span></span><br><span class="line">            <span class="keyword">int</span>[] nodesHash = <span class="keyword">new</span> <span class="keyword">int</span>[VIRTUAL_NODE_NUMBER];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VIRTUAL_NODE_NUMBER; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> hash = CollectorCluster.rehash(collector.getIp() + <span class="string">":"</span> + i);</span><br><span class="line">                nodesHash[i] = hash;</span><br><span class="line">                hashRingMap.put(hash, collector);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 保存采集所有虚拟节点的hash值</span></span><br><span class="line">            registeredServers.put(collector, nodesHash);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offline</span><span class="params">(Collector collector)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"delete server "</span> + collector.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Lock lock = clusterLock.writeLock();</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将该采集器所有虚拟节点的hash值从hash环上删除</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> hash : registeredServers.get(collector)) &#123;</span><br><span class="line">                hashRingMap.remove(hash);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 删除采集器</span></span><br><span class="line">            registeredServers.remove(collector);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collector <span class="title">choose</span><span class="params">(String deviceIp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash = rehash(deviceIp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Lock lock = clusterLock.readLock();</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 逆时针找映射节点</span></span><br><span class="line">            Map.Entry&lt;Integer, Collector&gt; entry = hashRingMap.floorEntry(hash);</span><br><span class="line">            Collector collector =</span><br><span class="line">                    entry == <span class="keyword">null</span> ? hashRingMap.lastEntry().getValue() : entry.getValue();</span><br><span class="line"></span><br><span class="line">            System.out.println(deviceIp + <span class="string">" --&gt; "</span> + collector);</span><br><span class="line">            <span class="keyword">return</span> collector;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x03-测试"><a href="#0x03-测试" class="headerlink" title="0x03 测试"></a>0x03 测试</h3><p>首先实现一个具体的采集器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tomoya</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultCollector</span> <span class="keyword">implements</span> <span class="title">Collector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">    DefaultCollector(String ip) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ip = ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIp</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ip = ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">collect</span><span class="params">(Device ne, List&lt;String&gt; commands)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashMap&lt;&gt;(commands.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"DefaultCollector&#123;"</span> +</span><br><span class="line">                <span class="string">"ip='"</span> + ip + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DefaultCollector that = (DefaultCollector) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(ip, that.ip);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> CollectorCluster.rehash(ip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后直接在CollectorCluster类中增加一个main函数来测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    CollectorCluster cluster = <span class="keyword">new</span> CollectorCluster();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册5个采集器</span></span><br><span class="line">    List.of(<span class="string">"192.168.0.1"</span>, <span class="string">"192.168.0.2"</span>, <span class="string">"192.168.0.3"</span>, <span class="string">"192.168.0.4"</span>, <span class="string">"192.168.0.5"</span>)</span><br><span class="line">            .stream()</span><br><span class="line">            .map(DefaultCollector::<span class="keyword">new</span>)</span><br><span class="line">            .forEach(cluster::register);</span><br><span class="line"></span><br><span class="line">    String ipPrefix = <span class="string">"136.10.1."</span>;</span><br><span class="line">    <span class="comment">// 20个设备 进行负载均衡</span></span><br><span class="line">    Stream.iterate(<span class="number">1</span>, i -&gt; i + <span class="number">1</span>).limit(<span class="number">20</span>).map(i -&gt; ipPrefix + i).forEach(cluster::choose);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"============"</span>);</span><br><span class="line">    <span class="comment">// 离线一个采集器</span></span><br><span class="line">    cluster.offline(<span class="keyword">new</span> DefaultCollector(<span class="string">"192.168.0.5"</span>));</span><br><span class="line">    <span class="comment">// 20个设备 再次进行负载均衡</span></span><br><span class="line">    Stream.iterate(<span class="number">1</span>, i -&gt; i + <span class="number">1</span>).limit(<span class="number">20</span>).map(i -&gt; ipPrefix + i).forEach(cluster::choose);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在分析一个需求，需要开发一个采集器的调度框架，实现采集器的注册，离线以及采集任务分配(负载均衡)。&lt;/p&gt;
&lt;p&gt;采集器用于登录到网络设备上采集数据，部分运营商考虑到设备性能问题，会限制同时只能有一个用户登录设备查询数据。那么在此限制下，分配采集任务时需要保证：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于同一设备的任务始终都落在同一个采集器上去执行，才能保证同一时刻对于同一设备不会有多个采集器采集。&lt;/li&gt;
&lt;li&gt;而且，需要保证在某个采集器失效离线时，之前落在该采集器上的设备列表需要均匀分布到剩下的采集器上去，不至于造成某一个采集器负载过大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到这里，实现方案已经呼之欲出，这不就是解决分布式缓存问题的套路么 — 一致性哈希算法，可以参考这篇文章进行了解 &lt;a href=&quot;http://blog.codinglabs.org/articles/consistent-hashing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《一致性哈希算法及其在分布式系统中的应用》&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://tomoyadeng.github.io/blog/categories/Java/"/>
    
    
      <category term="Java" scheme="https://tomoyadeng.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker快速搭建Kafka开发环境</title>
    <link href="https://tomoyadeng.github.io/blog/2018/06/02/kafka-cluster-in-docker/"/>
    <id>https://tomoyadeng.github.io/blog/2018/06/02/kafka-cluster-in-docker/</id>
    <published>2018-06-02T09:46:22.000Z</published>
    <updated>2018-10-12T16:07:28.956Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近准备学习Kafka，于是买了《Kafka权威指南》来看。作为一个初学者，快速搭建起一套可以运行的环境十分重要，跟着该书第2章的安装介绍可以完成在Linux系统下的环境搭建，但是读下来发现步骤还是有点繁多。有没有什么更加快捷的办法搭建一套可以运行的开发环境呢，于是我想到了Docker。2018年了，容器化已经成为了主流，在本地进行开发和测试的时候使用Docker也便于模拟多节点的集群环境。</p><a id="more"></a><h3 id="0x00-前置条件"><a href="#0x00-前置条件" class="headerlink" title="0x00 前置条件"></a>0x00 前置条件</h3><ul><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Docker</a>:  要想使用Docker来启动kafka，开发环境提前装好Docker是必须的，我一般在Ubuntu虚拟机上进行开发测试</li><li><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Docker Compose</a>: kafka依赖zookeeper，使用docker-compose来管理容器依赖</li></ul><h3 id="0x01-Docker镜像"><a href="#0x01-Docker镜像" class="headerlink" title="0x01 Docker镜像"></a>0x01 Docker镜像</h3><p>要想使用Docker安装Kafka，第一件事当然是去Docker hub上找镜像以及使用方法啦。发现kafka并不像mysql或者redis那样有官方镜像，不过Google一下后发现可以选择知名的三方镜像<a href="https://hub.docker.com/r/wurstmeister/kafka/" target="_blank" rel="noopener">wurstmeister/kafka</a></p><p><a href="https://github.com/wurstmeister/kafka-docker" target="_blank" rel="noopener">wurstmeister/kafka</a>在Github上更新还算频繁，目前使用kafka版本是<code>1.1.0</code></p><h3 id="0x02-安装"><a href="#0x02-安装" class="headerlink" title="0x02 安装"></a>0x02 安装</h3><ol><li><p>参考<a href="https://github.com/wurstmeister/kafka-docker/blob/master/test/docker-compose.yml" target="_blank" rel="noopener">官方测试用的docker-compose.yml</a>直接在自定义的目录位置新建docker-compose的配置文件</p><p> <code>touch ~/docker/kafka/docker-compose.yml</code></p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  zookeeper:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">wurstmeister/zookeeper</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"2181"</span></span><br><span class="line"><span class="attr">  kafka:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"9092"</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      KAFKA_ADVERTISED_HOST_NAME:</span> <span class="number">192.168</span><span class="number">.5</span><span class="number">.139</span></span><br><span class="line"><span class="attr">      KAFKA_ZOOKEEPER_CONNECT:</span> <span class="attr">zookeeper:2181</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br></pre></td></tr></table></figure><p> <strong>注意：</strong> <code>KAFKA_ADVERTISED_HOST_NAME</code> 需要配置为宿主机的ip</p></li><li><p><code>docker-compose</code> 启动kafka</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/docker/kafka# docker-compose up -d</span><br></pre></td></tr></table></figure><p> 启动完之后通过<code>docker ps</code>可以看到启动了一个zookeeper容器和一个kafka容器</p></li><li><p>启动多个kafka节点，比如3</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/docker/kafka# docker-compose scale kafka=3</span><br></pre></td></tr></table></figure><p> 如果没什么错误的话，再通过<code>docker ps</code>可以看到启动了一个zookeeper容器和三个kafka容器</p></li></ol><h3 id="0x03-验证"><a href="#0x03-验证" class="headerlink" title="0x03 验证"></a>0x03 验证</h3><ol><li><p>首先进入到一个kafka容器中，例如: kafka_kafka_1</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/docker/kafka# docker exec -it kafka_kafka_1 /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>创建一个topic并查看，需要指定zookeeper的容器名(这里是kafka_zookeeper_1)，topic的名字为test</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">KAFKA_HOME/bin/kafka-topics.sh --create --topic <span class="built_in">test</span> --zookeeper kafka_zookeeper_1:2181 --replication-factor 1 --partitions 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">KAFKA_HOME/bin/kafka-topics.sh --list --zookeeper kafka_zookeeper_1:2181</span></span><br></pre></td></tr></table></figure></li><li><p>发布消息，输入几条消息后，按^C退出发布</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">KAFKA_HOME/bin/kafka-console-producer.sh --topic=<span class="built_in">test</span> --broker-list kafka_kafka_1:9092</span></span><br></pre></td></tr></table></figure></li><li><p>接受消息</p> <figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">KAFKA_HOME/bin/kafka-console-consumer.sh --bootstrap-server kafka_kafka_1:9092 --from-beginning --topic <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure></li></ol><p>如果接收到了发布的消息，那么说明部署正常，可以正式使用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近准备学习Kafka，于是买了《Kafka权威指南》来看。作为一个初学者，快速搭建起一套可以运行的环境十分重要，跟着该书第2章的安装介绍可以完成在Linux系统下的环境搭建，但是读下来发现步骤还是有点繁多。有没有什么更加快捷的办法搭建一套可以运行的开发环境呢，于是我想到了Docker。2018年了，容器化已经成为了主流，在本地进行开发和测试的时候使用Docker也便于模拟多节点的集群环境。&lt;/p&gt;
    
    </summary>
    
      <category term="Middleware" scheme="https://tomoyadeng.github.io/blog/categories/Middleware/"/>
    
    
      <category term="kafka" scheme="https://tomoyadeng.github.io/blog/tags/kafka/"/>
    
      <category term="docker" scheme="https://tomoyadeng.github.io/blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用 PriorityQueue 求解 Top K 问题</title>
    <link href="https://tomoyadeng.github.io/blog/2018/05/13/topK-with-PriorityQueue/"/>
    <id>https://tomoyadeng.github.io/blog/2018/05/13/topK-with-PriorityQueue/</id>
    <published>2018-05-13T06:27:59.000Z</published>
    <updated>2018-10-12T16:10:53.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><a id="more"></a><h3 id="0x00-问题描述"><a href="#0x00-问题描述" class="headerlink" title="0x00 问题描述"></a>0x00 问题描述</h3><p>这两天在看一些面试题的时候，遇到一个问题:</p><blockquote><p>有N(N&gt;&gt;10000)个整数,求出其中的前K个最大的数</p></blockquote><p>在网上搜了下，大概有三种解决思路：</p><ul><li>排序：这种方式最好理解，但是时间复杂度较高(使用快排,O(NlogN))</li><li>堆： 维护一个有边界的小顶堆(O(NlogK))</li><li>位图： 理解较为困难 (O(N))</li></ul><p>自己动手试了试第二种思路在Java中的实现(泛型版本)</p><h3 id="0x01-Java实现"><a href="#0x01-Java实现" class="headerlink" title="0x01 Java实现"></a>0x01 Java实现</h3><p>在 Java 中，PriorityQueue 类实现了堆这种数据结构，可以用来求解Top K 问题。</p><p>整个算法的思想就是： 通过PriorityQueue实现一个有界的堆，逐个向堆中添加元素，当元素个数超过边界时，淘汰堆顶元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomoyadeng.javabeginner.interview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopK</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 堆的边界，Top K 问题中的 K</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> boundary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优先队列，用来构造一个有界的堆</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PriorityQueue&lt;T&gt; boundaryHeap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过自定义边界 boundary 可以求解 top K 问题</span></span><br><span class="line"><span class="comment">     * 通过自定义比较器 comparator 可以控制求解 top K 大 还是 top K 小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> boundary 边界 K</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> comparator 数据比较器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TopK</span><span class="params">(<span class="keyword">int</span> boundary, Comparator&lt;T&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.boundary = boundary;</span><br><span class="line">        boundaryHeap = <span class="keyword">new</span> PriorityQueue&lt;&gt;(boundary, comparator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求解数据流中的top K， 将结果写入List中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataStream 数据流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> results top K 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">topK</span><span class="params">(Stream&lt;T&gt; dataStream, List&lt;T&gt; results)</span> </span>&#123;</span><br><span class="line">        dataStream.forEach(<span class="keyword">this</span>::add);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!boundaryHeap.isEmpty()) &#123;</span><br><span class="line">            results.add(boundaryHeap.poll());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向有界堆中添加元素的帮助方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 待添加数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        boundaryHeap.add(t);</span><br><span class="line">        <span class="keyword">if</span> (boundaryHeap.size() &gt; boundary) &#123;</span><br><span class="line">            boundaryHeap.poll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x02-测试"><a href="#0x02-测试" class="headerlink" title="0x02 测试"></a>0x02 测试</h3><p>直接写一个main函数进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造一个 范围为 [0, 2^30] 的 Integer 流，通过limit可以控制大小</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> upLimit = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">    Stream&lt;Integer&gt; stream = Stream.generate(Math::random)</span><br><span class="line">            .map(d -&gt; d * upLimit)</span><br><span class="line">            .map(d -&gt; (<span class="keyword">int</span>) Math.round(d))</span><br><span class="line">            .limit(<span class="number">100_000_000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 (o1, o2) -&gt; (o1 - o2) 换成 (o1, o2) -&gt; (o2 - o1) 可以求解 top K 小</span></span><br><span class="line">    TopK&lt;Integer&gt; topK = <span class="keyword">new</span> TopK&lt;&gt;(<span class="number">10</span>, (o1, o2) -&gt; (o1 - o2));</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    topK.topK(stream, results);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"results: "</span> + results);</span><br><span class="line">    System.out.println(<span class="string">"cost: "</span> + (endTime - startTime) / <span class="number">1000.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1亿数据测试结果：</p><blockquote><p>results: [1073741717, 1073741721, 1073741740, 1073741747, 1073741768, 1073741781, 1073741785, 1073741791, 1073741792, 1073741813]<br>cost: 7.656</p></blockquote><h3 id="0x03-优点分析"><a href="#0x03-优点分析" class="headerlink" title="0x03 优点分析"></a>0x03 优点分析</h3><p>在输入数据流是一个惰性流(不需要一次性将全部数据加载到内存)的情况下，这种方式速度较快且占用最少的内存，内存中只需要维护一个固定大小的堆即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;0x00-问题描述&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Java" scheme="https://tomoyadeng.github.io/blog/categories/Java/"/>
    
    
      <category term="Java" scheme="https://tomoyadeng.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot-mybatis-docker整合使用</title>
    <link href="https://tomoyadeng.github.io/blog/2017/07/23/spring-boot-mybatis-docker/"/>
    <id>https://tomoyadeng.github.io/blog/2017/07/23/spring-boot-mybatis-docker/</id>
    <published>2017-07-23T09:13:17.000Z</published>
    <updated>2018-10-12T16:08:33.234Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><a id="more"></a><h3 id="0x00-前置条件"><a href="#0x00-前置条件" class="headerlink" title="0x00 前置条件"></a>0x00 前置条件</h3><ol><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Java</a></li><li><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">Maven</a></li><li><a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener">Docker</a>, <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Docker Compose</a></li></ol><h3 id="0x01-使用maven新建Spring-Boot工程"><a href="#0x01-使用maven新建Spring-Boot工程" class="headerlink" title="0x01 使用maven新建Spring Boot工程"></a>0x01 使用maven新建Spring Boot工程</h3><p>按工程根目录的相对路径创建如下文件</p><p><code>pom.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tomoyadeng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo-springboot-docker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>src/main/java/demo/Application.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Get started"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样，一个简单的Spring boot的应用就创建OK。可使用<code>mvn package</code>编译打包为jar， 然后使用命令行<code>java -jar target/demo-springboot-docker-1.0.0.jar</code>直接启动</p><h3 id="0x02-将应用docker化"><a href="#0x02-将应用docker化" class="headerlink" title="0x02 将应用docker化"></a>0x02 将应用docker化</h3><p>首先创建应用的Dockerfile</p><p><code>src/main/docker/Dockerfile</code><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="bash">ADD demo-springboot-docker-1.0.0.jar app.jar</span></span><br><span class="line"><span class="bash">RUN sh -c <span class="string">'touch /app.jar'</span></span></span><br><span class="line"><span class="bash">ENV JAVA_OPTS=<span class="string">""</span></span></span><br><span class="line"><span class="bash">ENTRYPOINT [ <span class="string">"sh"</span>, <span class="string">"-c"</span>, <span class="string">"java <span class="variable">$JAVA_OPTS</span> -Djava.security.egd=file:/dev/./urandom -jar /app.jar"</span> ]</span></span><br></pre></td></tr></table></figure></p><p>然后在pom.xml中添加maven插件依赖，以支持构建docker镜像</p><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>tomoyadeng/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>src/main/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>mvn install docker:build</code>即可构建docker镜像，构建完成后，<code>docker images</code>可查看当前的镜像。</p><p><code>docker run -p 8080:8080 -t tomoyadeng/demo-springboot-docker</code> 可以启动docker容器，此时就完成了此应用的docker化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tomoya@ubuntu:~/Code/demo-springboot-docker$ docker run -p 8080:8080 -t tomoyadeng/demo-springboot-docker</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">'_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="string">( ( )\___ | '</span>_ | <span class="string">'_| | '</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">'  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="string"> =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::        (v1.5.4.RELEASE)</span></span><br><span class="line"><span class="string">2017-07-23 11:53:34.894  INFO 5 --- [           main] demo.Application                         : Starting Application v1.0.0 on f1ff304f4b94 with PID 5 (/app.jar started by root in /)</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure></p><p>可使用<code>docker stop</code>和<code>docker rm</code>来停止容器运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tomoya@ubuntu:~/Code/demo-springboot-docker$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE                               COMMAND                  CREATED              STATUS              PORTS                    NAMES</span><br><span class="line">f1ff304f4b94        tomoyadeng/demo-springboot-docker   <span class="string">"sh -c 'java <span class="variable">$JAVA</span>..."</span>   About a minute ago   Up About a minute   0.0.0.0:8080-&gt;8080/tcp   keen_swartz</span><br><span class="line">$ docker stop f1ff304f4b94</span><br><span class="line">$ docker rm f1ff304f4b94</span><br></pre></td></tr></table></figure><h3 id="0x03-创建MyBatis的demo"><a href="#0x03-创建MyBatis的demo" class="headerlink" title="0x03 创建MyBatis的demo"></a>0x03 创建MyBatis的demo</h3><p>首先，在<code>pom.xml</code>中添加mybatis和mysql-connector的依赖</p><p><code>pom.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>添加object类，此处省略了getter和setter</p><p><code>src/main/java/demo/domain/User.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phoneNo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加mapper</p><p><code>src/main/java/demo/mapper/UserMapper.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> demo.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from tbl_user where name = #&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findByName</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改Application.java，添加查询数据库的操作</p><p><code>src/main/java/demo/Application.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> demo.domain.User;</span><br><span class="line"><span class="keyword">import</span> demo.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.web.bind.annotation.RequestMethod.GET;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Application</span><span class="params">(UserMapper userMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMapper = userMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Get started"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, method = GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserByName</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">        User user = <span class="keyword">this</span>.userMapper.findByName(name);</span><br><span class="line">        <span class="keyword">return</span> user == <span class="keyword">null</span> ? <span class="string">"No such user!"</span> : user.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加application.yml配置文件</p><p><code>src/main/resources/application.yml</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    schema:</span> <span class="attr">classpath:schema.sql</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">container</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://$&#123;DATABASE_HOST&#125;:$&#123;DATABASE_PORT&#125;/$&#123;DATABASE_NAME&#125;?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">$&#123;DATABASE_USER&#125;</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">$&#123;DATABASE_PASSWORD&#125;</span></span><br><span class="line"><span class="attr">    schema:</span> <span class="attr">classpath:schema.sql</span></span><br><span class="line"><span class="attr">    initialize:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>附：schema.sql</p><p><code>src/main/resources/schema.sql</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> tbl_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_user(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>),phoneNo <span class="built_in">varchar</span>(<span class="number">16</span>), email <span class="built_in">varchar</span>(<span class="number">32</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_user(<span class="keyword">name</span>, phoneNo, email) <span class="keyword">values</span> (<span class="string">'dave'</span>, <span class="string">'13012345678'</span>, <span class="string">'dave@tomoyadeng.com'</span>);</span><br></pre></td></tr></table></figure></p><p>修改Dockerfile，主要是修改ENTRYPOINT</p><p><code>src/main/docker/Dockerfile</code><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="bash">ADD demo-springboot-docker-1.0.0.jar app.jar</span></span><br><span class="line"><span class="bash">RUN sh -c <span class="string">'touch /app.jar'</span></span></span><br><span class="line"><span class="bash">ENV JAVA_OPTS=<span class="string">""</span></span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="string">"-Dspring.profiles.active=container"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure></p><h3 id="0x04-手动启动docker应用"><a href="#0x04-手动启动docker应用" class="headerlink" title="0x04 手动启动docker应用"></a>0x04 手动启动docker应用</h3><p>首先，我们需要先启动一个mysql的容器，执行下面命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name mybatis-mysql \</span><br><span class="line">    -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">    -e MYSQL_DATABASE=mybatis \</span><br><span class="line">    -e MYSQL_USER=dbuser \</span><br><span class="line">    -e MYSQL_PASSWORD=123456 \</span><br><span class="line">    mysql:latest</span><br></pre></td></tr></table></figure><p>启动完成后，可用<code>docker ps</code>查看，也可以通过执行下面命令连接到mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --link mybatis-mysql:mysql --rm mysql sh \</span><br><span class="line">    -c <span class="string">'exec mysql -h"$MYSQL_PORT_3306_TCP_ADDR" -P"$MYSQL_PORT_3306_TCP_PORT" -uroot -p"$MYSQL_ENV_MYSQL_ROOT_PASSWORD"'</span></span><br></pre></td></tr></table></figure><p>然后，启动应用容器并连接到mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -t \</span><br><span class="line">    --name demo-springboot-docker \</span><br><span class="line">    --link mybatis-mysql:mysql \</span><br><span class="line">    -p 8088:8080 \</span><br><span class="line">    -e DATABASE_HOST=mybatis-mysql \</span><br><span class="line">    -e DATABASE_PORT=3306 \</span><br><span class="line">    -e DATABASE_NAME=mybatis \</span><br><span class="line">    -e DATABASE_USER=root \</span><br><span class="line">    -e DATABASE_PASSWORD=123456 \</span><br><span class="line">    tomoyadeng/demo-springboot-docker</span><br></pre></td></tr></table></figure><p>启动完成后，使用<code>docker ps</code>查看，或者直接访问url测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8088/user?name=dave</span><br></pre></td></tr></table></figure><h3 id="0x05-使用docker-compose启动"><a href="#0x05-使用docker-compose启动" class="headerlink" title="0x05 使用docker-compose启动"></a>0x05 使用docker-compose启动</h3><p>在项目根路径下增加docker-compose的配置文件</p><p><code>docker-compose.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  mybatis-mysql:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mysql:latest</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_DATABASE=mybatis</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_USER=dbuser</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_PASSWORD=123456</span></span><br><span class="line"><span class="attr">  demo-springboot-docker:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">tomoyadeng/demo-springboot-docker</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">mybatis-mysql</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8088</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DATABASE_HOST=mybatis-mysql</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DATABASE_USER=root</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DATABASE_PASSWORD=123456</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DATABASE_NAME=mybatis</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DATABASE_PORT=3306</span></span><br></pre></td></tr></table></figure><p>启动前，先将之前手动启动的容器停掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop demo-springboot-docker</span><br><span class="line">docker stop mybatis-mysql</span><br><span class="line">docker rm demo-springboot-docker</span><br><span class="line">docker rm mybatis-mysql</span><br></pre></td></tr></table></figure><p>然后直接使用命令启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;0x00-前置条件&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Framework" scheme="https://tomoyadeng.github.io/blog/categories/Framework/"/>
    
    
      <category term="docker" scheme="https://tomoyadeng.github.io/blog/tags/docker/"/>
    
      <category term="spring boot" scheme="https://tomoyadeng.github.io/blog/tags/spring-boot/"/>
    
  </entry>
  
</feed>
